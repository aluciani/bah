#include "<signal.h>"
#include "<string.h>"

#darwin {
    #include "<mach/mach.h>"
}


#define __Bah_safe_string(s cpstring) cpstring

const null = <ptr>0

const true = <bool>1
const false = <bool>0

#define! exit(i int)

#include "memory.bah"

#cLib "lm"

#define! signal(sig int, hdl ptr)

#define! sizeof(a ptr) int

#macro a++ => a = a + 1
#macro a += b* => a = a + b
#macro a-- => a = a - 1
#macro a -= b* => a = a - b

//#cLib "Wl,-eentry main"

#define! strlen(a cpstring) int
#define! strncpy(a cpstring, b cpstring, l int)
#define! strcat(a cpstring, b cpstring)

//Function used by the compiler when concatenating cpstrings.
//You can use it as a function or do cpstring+cpstring.
concatCPSTRING(a cpstring, b cpstring) cpstring {
	lenA = strlen(a)
	lenB = strlen(b)
	r cpstring = memoryAlloc(lenA + lenB + 1)
	strncpy(r,a,lenA)
	strcat(r,b)
	return r
}

//Funcion used by the compiler to declare a cpstring.
//It allocates memory for the cpstring.
__STR(a cpstring) cpstring {
	lenA = strlen(a)
	r cpstring = memoryAlloc(lenA+1)
	strncpy(r,a,lenA)
	return r
}

#include "<unistd.h>"
#include "<sys/types.h>"
#include "<sys/stat.h>"
#include "<fcntl.h>"

#define! write(fd FILE*, t cpstring, l int)
#define! read(fd FILE*, t cpstring, l int) int

//Prints text to the terminal.
print(s cpstring) {
    write(<ptr>1, s, strlen(s))
}

//Converts a bah array to a C array.
cArr(arr ptr) ptr {
	noCheck(array(void*)*a = arr)
	return noCheck(a->data)
}

__checkString(s cpstring, l cpstring) bool {

	if <ptr>s == null {
		print("cpstring ("+l+") is null \n")
		exit(1)
	}

	return true
}

#include "channel.bah"
__BAH_panic_chan chan:cpstring = null

//Print an error to the terminal and exits the program.
__Bah_common_panic(e cpstring) {
    if strlen(e) {
        print(e)
        print("\n")
		cleanShutDown()
    }
}

#linux {
	const panic = __Bah_common_panic
}
#windows {
	const panic = __Bah_common_panic
}
#darwin {
	const panic = __Bah_common_panic
}

__BAH_panic(e cpstring, line cpstring) {
	if __BAH_panic_chan != null {
		e -> __BAH_panic_chan
		return
	}

	print("panic ("+line+"): "+e+"\n")
	cleanShutDown()
}

//Used for recovering from a panic instead exitting the program.
//It needs a  pointer to a non null cpstring which will get the message.
recover(s cpstring*) bool {
	__BAH_panic_chan = chan cpstring
	err = <- __BAH_panic_chan
	*s = err
	return true
}

#define strAsArr(s cpstring) []char

__Bah_safe_string(s cpstring) cpstring {
	if <ptr>s == null {
		return "(nil)"
	}
	if strlen(s) > 50 {
		s = __STR(s)
		a = strAsArr(s)
		a[47] = '.'
		a[48] = '.'
		a[49] = '.'
		a[50] = <char>0
	}

	return "\""+s+"\""
}

#include "iostream.bah"