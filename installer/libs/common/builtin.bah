#include "<signal.h>"
#include "<string.h>"

#darwin {
    #include "<mach/mach.h>"
}


#define __Bah_safe_string(s cpstring) cpstring

const null = <ptr>0

const true = <bool>1
const false = <bool>0

#define! exit(i int)
#define! strcmp(a cpstring, b cpstring) int
#define! strlen(a cpstring) int


__bah_strcmp(a cpstring, b cpstring) int {
    if <ptr>a == null {
        a = ""
    }
    if <ptr>b == null {
        b = ""
    }
    return strcmp(a, b)
}

const strcmp = __bah_strcmp

__bah_strlen(s cpstring) int {
    if <ptr>s == null {
        return 0
    }
    return strlen(s)
}

const strlen = __bah_strlen

#include "memory.bah"


#cLib "lm"

#define! signal(sig int, hdl ptr)

#define! sizeof(a ptr) int

#macro a++ => a = a + 1
#macro a += b* => a = a + b
#macro a-- => a = a - 1
#macro a -= b* => a = a - b

//#cLib "Wl,-eentry main"

#define! strlen(a cpstring) int
#define! strncpy(a cpstring, b cpstring, l int)
#define! strcat(a cpstring, b cpstring)

//Function used by the compiler when concatenating cpstrings.
//You can use it as a function or do cpstring+cpstring.
concatCPSTRING(a cpstring, b cpstring) cpstring {
	lenA = strlen(a)
	lenB = strlen(b)
	r cpstring = memoryAlloc(lenA + lenB + 1)
	strncpy(r,a,lenA)
	strcat(r,b)
	return r
}

//Funcion used by the compiler to declare a cpstring.
//It allocates memory for the cpstring.
__STR(a cpstring) cpstring {
	lenA = strlen(a)
	r cpstring = memoryAllocSTR(lenA+1)
	memcpy(r,a,lenA)
	return r
}

#include "<unistd.h>"
#include "<sys/types.h>"
#include "<sys/stat.h>"
#include "<fcntl.h>"

#define! write(fd FILE*, t cpstring, l int)
#define! read(fd FILE*, t cpstring, l int) int

//Prints text to the terminal.
print(s cpstring) {
    write(<ptr>1, s, strlen(s))
}

//Converts a bah array to a C array.
cArr(arr ptr) ptr {
	noCheck(array(void*)*a = arr)
	return noCheck(a->data)
}

__checkString(s cpstring, l cpstring) bool {

	if <ptr>s == null {
		print("cpstring ("+l+") is null \n")
		exit(1)
	}

	return true
}

#include "channel.bah"
__BAH_panic_chan chan:cpstring = null

//Print an error to the terminal and exits the program.
__Bah_common_panic(e cpstring) {
    if strlen(e) {
        print(e)
        print("\n")
		cleanShutDown()
    }
}

#linux {
	const panic = __Bah_common_panic
}
#windows {
	const panic = __Bah_common_panic
}
#darwin {
	const panic = __Bah_common_panic
}

struct __Bah_fnName_mapper {
	p: ptr
	n: cpstring
}

__Bah_fnNames = []__Bah_fnName_mapper

__Bah_fnNames_append(fnn __Bah_fnName_mapper) {
	__Bah_fnNames[len(__Bah_fnNames)] = fnn
}

#define! backtrace(arr ptr, l int) int

__BAH_panic(e cpstring, line cpstring) {
	if __BAH_panic_chan != null {
		e -> __BAH_panic_chan
		return
	}

	print("panic ("+line+"): "+e+"\n")
	
	#linux {
		arr = []ptr
		allocateArray(arr, 10)
		size = backtrace(noCheck(arr->data), 10)
	
		print("Backtrace:\n")

		min = -1
		max = -1

		i=1; for i < size, i++ {
			p int = arr[i]
			closest __Bah_fnName_mapper
			dist = -1
			j=0; for j < len(__Bah_fnNames), j++ {
				fnn = __Bah_fnNames[j]
				fnp int = fnn.p
				if fnp < min || min == -1 {
					min = fnp
				}
				if fnp > max || max == -1 {
					max = fnp
				}
				if p > fnp {
					if dist == -1 || p - fnp < dist {
						dist = p - fnp
						closest = fnn
					}
				}
			}
			if dist == -1 {
				print("\t???\n")
				continue
			}

			status = ""
			fnp int = closest.p
			if min == fnp || max == fnp {
				if dist > 10000 {
					continue
				}
				status = "?"
			}
			print("\t"+closest.n+"() "+status+" \n")
			if closest.n == "main" {
				break
			}
		}
	}

	cleanShutDown()
}

__Bah_segfault_handle(sig int) {
	__BAH_panic("Memory error (segfault).", "???")
}

__Bah_init_segfaultHandle() bool {
	signal(noCheck(SIGSEGV), __Bah_segfault_handle)
	return true
}

__Bah_init_segfaultHandle_OK = __Bah_init_segfaultHandle()

//Used for recovering from a panic instead exitting the program.
//It needs a  pointer to a non null cpstring which will get the message.
recover(s cpstring*) bool {
	__BAH_panic_chan = chan cpstring
	err = <- __BAH_panic_chan
	*s = err
	return true
}

// #define strAsArr(s cpstring) []char

__Bah_safe_string(s cpstring) cpstring {
	if <ptr>s == null {
		return "(nil)"
	}
	if strlen(s) > 50 {
		s = __STR(s)
		a = strAsArr(s)
		a[47] = '.'
		a[48] = '.'
		a[49] = '.'
		a[50] = <char>0
	}

	return "\""+s+"\""
}


//Used for getting a character by its index inside a cpstring.
cpstringCharAt(s cpstring, i int) char {
    c = <char>0
    noCheck(c = s[i])
    return c
}

cpstringSubsitute(s cpstring, i int, l int) cpstring {
	size = l - i
	ns = memoryAllocSTR(size+1)
	memcpy(ns, noCheck(s+i), size)
	return ns
}

arraySubstitute(arr []ptr, i int, l int) ptr {
	length = l - i
	offset int = i * noCheck(arr->elemSize)
	na = []ptr
	noCheck(na->elemSize = arr->elemSize)
	noCheck(na->length = length)

	allocLength = length
	if length > 50 {
		allocLength += allocLength % 50
	} else {
		allocLength = 50
	}
	size = allocLength * noCheck(arr->elemSize)
	realSize = length * noCheck(arr->elemSize)
	data = memoryAlloc(size)
	oData cpstring = noCheck(arr->data)
	memcpy(data, noCheck(oData + offset), realSize)
	noCheck(na->data = data)
	return na
}

#include "map.bah"