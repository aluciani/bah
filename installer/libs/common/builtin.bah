//LIB C declarations
#include "cBinds.bah"

#darwin {
    #include "<mach/mach.h>"
}

struct Bah_Array_Type {
	data: ptr
	length: uint
	realLength: uint
	elemSize: uint
}

#define __BAH_init()
#define __BAH__main(args Bah_Array_Type*) int

#define __BAH_panic(e str, l str)
#define __Bah_safe_string(s str) str
#define strSubstitute(s str, i uint, l uint) str
#define __Bah_getVal_boundsChecked(arr []ptr, ind uint32, error str) []ptr
#define __Bah_check_arr_bounds(arr []ptr, ind uint32) bool
#define __Bah_realocate_arr(arr []ptr, nLength uint32)

//Temporary fix for gcc 14.1
#cLib "Wno-error=incompatible-pointer-types" "Wno-error=int-conversion" // "Wno-error=implicit-function-declaration"

const null = <ptr>0

const true = <bool>1
const false = <bool>0

const strLenSize = 8

#define len(a ptr) uint

cStr(s str) char* {
	if <ptr>s == null {
		return null
	}
	return <char*>(<int>s + strLenSize)
}

__bah_strlenSTR(s ptr) uint32 {
	if s == null {
		return 0
	}
	i uint* = s
	return *i
}

//Compare two strs.
//This function is used by the compiler.
__bah_strcmp(a str, b str) int {
	if <ptr>a == null || <ptr>b == null {
		return 1
	}
    return strcmp(a, b)
}
 
const strcmp = __bah_strcmp

//Gives the length of a str.
//This is used by the compiler.
Cstrlen(s char*) int {
	if s == null {
		return 0
	}
	return noCheck(strlen(s))
}

const strlen = __bah_strlenSTR

//Prints text to the terminal.
print(s str) {
    write(1, s, len(s))
}

// #unoptimized {
// 	#define memcpy()
// 	#define __BAH_memcpy(dest char*, source char*, l uint)
// 	const memcpy = __BAH_memcpy
// }

// #optimized {
// 	#import "stdopti.bahstrp"
// }

#include "memory.bah"

buffToStr(b char*) str {
	l = strlen(<ptr>b)
	s = memoryAllocSTR(l+1)
	memcpy(<ptr>(<uint>s + strLenSize), b, l)
	ln uint* = s
	*ln = l
	return s
}

argsToArr(a char**, l int) []str {
    r = []str
    allocateArray(r, l)
    i=0; for i < l, i++ {
        sp char** = <char**>(<int>a + i * sizeof(char*))
        s = *sp
        r[i] = buffToStr(s)
    }
    return r
}

cStrToBah(s char*) str {
	if s == null {
		return null
	}
	l = strlen(<ptr>s)
	nstr = memoryAllocSTR(l+1)
	ln uint* = nstr
	*ln = l
	memcpy(<ptr>(<uint>nstr + strLenSize), s, l)
	return nstr
} 

__Bah_multiple_concat(b str*, l uint32) str {
    lens uint* = alloca(l * sizeof(uint)) //stack list of lengths
    tot uint = 0 //total length
    offset uint = 0 //offset for concatenation

    //calculate lengths of strs and total length
    i=0; for i < l, i++ {
        sl = len(<str>noCheck(b[i]))
        tot += sl
        noCheck(lens[i] = sl)
    }

    //allocate return str
    r = memoryAllocSTR(tot + 1)


    //concatenate all str
    i=0; for i < l, i++ {
        memcpy(<ptr>(<int>r + offset + strLenSize), noCheck(b[i]+strLenSize), noCheck(lens[i]))
        offset += <int>noCheck(lens[i])
    }

	ln uint* = r
	*ln = tot

    return r
}

#cLib "lm"


//Funcion used by the compiler to declare a str.
//It allocates memory for the str.
__STR(a str) str {
	lenA = len(a)
	r str = memoryAllocSTR(lenA+1)
	memcpy(<ptr>(<uint>r + strLenSize),<ptr>(<uint>a + strLenSize),lenA)
	ln uint* = r
	*ln = lenA
	return r
}

//Converts a bah array to a C array.
cArr(arr ptr) ptr {
	a Bah_Array_Type* = arr
	return a.data
}

//Checks if a str is null.
//This was used by the compiler before strcmp and strlen where made safe.
__checkString(s str, l str) bool {

	if <ptr>s == null {
		print("str ("+l+") is null \n")
		exit(1)
	}

	return true
}

#include "channel.bah"
__BAH_panic_chan chan:str = null

//Print an error to the terminal and exits the program.
//Please use panic() instead.
__Bah_common_panic(e str) {
    if len(e) {
        print(e)
        print("\n")
		cleanShutDown()
    }
}

const panic = __Bah_common_panic

struct __Bah_fnName_mapper {
	p: ptr
	n: str
}

__Bah_fnNames = []__Bah_fnName_mapper

//Used by the compiler to identify functions in backtrace.
__Bah_fnNames_append(fnn __Bah_fnName_mapper) {
	__Bah_fnNames[len(__Bah_fnNames)] = fnn
}

fastExec(s str) str {
    hdl = popen(s, "r")

    buff = buffer 1024
    response str = memoryAllocSTR(1)
	res = <ptr>response
	i=0; for res != null, i++ {
		memset(buff, 0, 1024)
		res = fgets(<char*>buff, 1023, hdl)
		if res == null || res == <ptr>-1 {
			break
		}
		response = memoryRealloc(response, (i+1)*1023)
		ln uint* = response
		*ln = (i)*1023 + strlen(<ptr>buff)
		memcpy(<ptr>(<int>response + strLenSize + i*1023), <char*>buff, 1024)
	}

    pclose(hdl)
	return response
}

// #dynamic {
// 	#cLib "no-pie" //For the backtrace to work in dynamically linked executables
// }

//Converts an unsigned int to a hex str.
uintToHex(i uint) str {
    if i == 0 {
        return "0"
    }

    s = buffer 66
    ind = -1

    for i != 0, i /= 16 {
        conv = i % 16
        conv += 48
        if conv > 57 {
            conv += 39
        }
        s[ind+1] = <char>conv
        ind++
    }
    
    ls = ind+1
    i=0; for i < ls/2, i++ {
        ii = ls-i-1
        osi = s[i]
        s[i] = s[ii]
        s[ii] = osi
    }

    s[ind+1] = <char>0

    return buffToStr(<char*>s)
}


__BAH_panic_backtrace_inner(p uint, selfPath buffer:4096, a2l bool) bool {
	if a2l {


		buff = "addr2line 0x"+uintToHex(p)+" -f -i -e "+buffToStr(<char*>selfPath)
		s = fastExec(buff)
		name = ""
		path = ""

		j=0; for j < len(s), j++ {
			if s[j] == <char>10 {
				name = s[:j]
				j++
				break
			}
		}

		path = s[j:len(s)-1]

		if name == "__BAH__main" || name == "main" {
			name = "main"
			path = "<internal>"
		}
		
		print("\t\033[33m")
		print(name)
		print("\033[m() \033[32m")
		print(path)
		print("\033[m \n")
		return name == "main"
	}

	closest = ["", -1]
	i=0; for i < len(__Bah_fnNames), i++ {
		fn = __Bah_fnNames[i]
		score = p - <uint>fn.p
		if score < 0 {
			continue
		}
		if score < closest[1] || closest[1] == -1 {
			closest[0] = fn.n
			closest[1] = score
		}
	}
	print("\t\033[33m")
	print(closest[0])
	print("\033[m()\n")
	return closest[0] == "main"
}

//Used by the compiler when panic() is called.
__BAH_panic(e str, line str) {

	if __BAH_panic_chan != null {
		e -> __BAH_panic_chan
		return
	}

	print("panic (")
	print(line)
	print("): ")
	print(e)
	print("\n")
	

	print("Backtrace:\n")

	selfPath = buffer 4096
	memset(selfPath, 0, 4096)

	#linux {
		readlink("/proc/self/exe", <char*>selfPath, 4096)
	}

	sb stat
	a2l = stat("/usr/bin/addr2line", &sb) == 0

	if a2l == false {
		print("(Note: could not find addr2line, could not show line numbers in backtrace.)\n")
	}

	if __BAH_panic_backtrace_inner(__builtin_return_address(0), selfPath, a2l) {
		cleanShutDown()
		return
	}

	if __BAH_panic_backtrace_inner(__builtin_return_address(1), selfPath, a2l) {
		cleanShutDown()
		return
	}

	
	if __BAH_panic_backtrace_inner(__builtin_return_address(2), selfPath, a2l) {
		cleanShutDown()
		return
	}

	if __BAH_panic_backtrace_inner(__builtin_return_address(3), selfPath, a2l) {
		cleanShutDown()
		return
	}

	if __BAH_panic_backtrace_inner(__builtin_return_address(4), selfPath, a2l) {
		cleanShutDown()
		return
	}

	if __BAH_panic_backtrace_inner(__builtin_return_address(5), selfPath, a2l) {
		cleanShutDown()
		return
	}

	if __BAH_panic_backtrace_inner(__builtin_return_address(6), selfPath, a2l) {
		cleanShutDown()
		return
	}

	if __BAH_panic_backtrace_inner(__builtin_return_address(7), selfPath, a2l) {
		cleanShutDown()
		return
	}

	cleanShutDown()
}

onMemoryError function()str = null

//Used by the compiler, called when a memory error occurs.
__Bah_segfault_handle(sig int32) {
	res = ""
	if onMemoryError != null {
		res = onMemoryError()
	}
	__BAH_panic("Memory error (segfault).\n"+res, "???")
}

//Used to register __Bah_segfault_handle().
__Bah_init_segfaultHandle() bool {
	signal(SIGSEGV, __Bah_segfault_handle)
	return true
}

__Bah_init_segfaultHandle_OK = __Bah_init_segfaultHandle()


//Used for recovering from a panic instead exitting the program.
//It needs a  pointer to a non null str which will get the message.
recover(s str*) bool {
	__BAH_panic_chan = chan str
	err = <- __BAH_panic_chan
	if s != null {
		*s = err
	}
	return true
}

//Used by the compiler in -verboseRuntime.
//This truncates strs that are too long.
__Bah_safe_string(s str) str {
	if <ptr>s == null {
		return "(nil)"
	}
	if len(s) > 50 {
		a = strToArr(s)
		a[47] = '.'
		a[48] = '.'
		a[49] = '.'
		a[50] = <char>0
		s = arrToStr(a)
	}

	return "\""+s+"\""
}

__Bah_getVal_boundsChecked(arr []ptr, ind uint32, error str) []ptr {
	if ind >= len(arr) {
		panic(error)
	}
	return arr
}

__Bah_realocate_arr(arr []ptr, nLength uint32) {
	if nLength < noCheck(arr->length) {
		return
	}

	if nLength != len(arr) {
		indexStr = buffer 65
		lengthStr = buffer 65

		panic("builtin: array append out of bounds violation. Can only append index=length.")
	}

	if nLength >= noCheck(arr->realLength) {
		if noCheck(arr->realLength) != 0 {
			noCheck(arr->realLength *= 2)
		} else {
			noCheck(arr->realLength = 50)
		}
		newPtr = memoryRealloc(noCheck(arr->data), <int>noCheck(arr->realLength) * <int>noCheck(arr->elemSize))
		rArr Bah_Array_Type* = arr
		rArr.data = newPtr
	}
	noCheck(arr->length = arr->length + 1)
	return
}

//Used by the compiler for operations like str[start:end].
strSubstitute(s str, i uint, l uint) str {
	size = l - i
	if i < 0 || size < 0 || size > len(s) {
		panic("builtin: str substitution out of bounds violation.")
	}
	ns = memoryAllocSTR(size+1)
	memcpy(<ptr>(<uint>ns + strLenSize), <ptr>(<uint>s + i + strLenSize), size)
	return ns
}

//Used by the compiler for operations like array[start:end].
arraySubstitute(arr []ptr, i int, l int) ptr {
	length = l - i
	if i < 0 || length < 0 || length > len(arr) {
		panic("builtin: array substitution out of bounds violation.")
	}
	offset int = i * <int>noCheck(arr->elemSize)
	na = []ptr
	noCheck(na->elemSize = arr->elemSize)
	noCheck(na->length = length)

	allocLength = length
	if length > 50 {
		allocLength += allocLength % 50
	} else {
		allocLength = 50
	}
	size = allocLength * <int>noCheck(arr->elemSize)
	realSize = length * <int>noCheck(arr->elemSize)
	data = memoryAlloc(size)
	oData str = noCheck(arr->data)
	memcpy(data, noCheck(oData + offset), realSize)
	noCheck(na->data = data)
	return na
}

#include "map.bah"

//This is used to efficiently construct strs character by character.
//Note that if you want to create a substring of a string efficiently, you can use str[from:to] instead.
struct strBuilder {
    buff: str
    length: uint32

	//Internal function
    _init() {
        this.buff = memoryAlloc(51 + strLenSize)
        this.length = 50
    }

	//Used for appending a character to the end of the str.
    append(c char) {
        ln uint* = this.buff
        l = *ln
        if l >= this.length {
            this.length *= 2
            b = memoryRealloc(this.buff, strLenSize + this.length + 1)
            this.buff = b
			ln = <uint*>this.buff
        }
        noCheck(this->buff[strLenSize + l] = c)
        *ln = l + 1
    }

	//Used for getting the resulting str.
    str() str {
		l = *(<uint*>this.buff)
        return this.buff
    }

}