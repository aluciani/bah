#include "<signal.h>"
#include "<string.h>"

const null = <ptr>0

const true = <bool>1
const false = <bool>0

#include "memory.bah"

#cLib "lm"

#define! signal(sig int, hdl ptr)

#define! sizeof(a ptr) int

#macro a++ => a = a + 1
#macro a += b* => a = a + b
#macro a-- => a = a - 1
#macro a -= b* => a = a - b

//#cLib "Wl,-eentry main"

#define! strlen(a cpstring) int
#define! strncpy(a cpstring, b cpstring, l int)
#define! strcat(a cpstring, b cpstring)

//Function used by the compiler when concatenating cpstrings.
//You can use it as a function or do cpstring+cpstring.
concatCPSTRING(a cpstring, b cpstring) cpstring {
	lenA = strlen(a)
	lenB = strlen(b)
	r cpstring = memoryAlloc(lenA + lenB + 1)
	strncpy(r,a,lenA)
	strcat(r,b)
	return r
}

//Funcion used by the compiler to declare a cpstring.
//It allocates memory for the cpstring.
__STR(a cpstring) cpstring {
	lenA = strlen(a)
	r cpstring = memoryAlloc(lenA+1)
	strncpy(r,a,lenA)
	return r
}

#include "<unistd.h>"
#include "<sys/types.h>"
#include "<sys/stat.h>"
#include "<fcntl.h>"

#define! write(fd FILE*, t cpstring, l int)

//Prints text to the terminal.
print(s cpstring) {
    write(<ptr>1, s, strlen(s))
}

//Print an error to the terminal and exits the program.
panic(e cpstring) {
    if strlen(e) {
        print(e)
        print("\n")
		cleanShutDown()
    }
}