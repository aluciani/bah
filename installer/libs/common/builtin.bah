#include "<signal.h>"
#include "<string.h>"

#darwin {
    #include "<mach/mach.h>"
}

struct! Bah_Array_Type {
	data: ptr
	length: uint
	realLength: uint
	elemSize: uint
}

#define __BAH_panic(e cpstring, l cpstring)
#define __Bah_safe_string(s cpstring) cpstring
#define cpstringSubsitute(s cpstring, i int, l int) cpstring
#define __Bah_getVal_boundsChecked(arr []ptr, ind uint32, error cpstring) []ptr
#define __Bah_check_arr_bounds(arr []ptr, ind uint32) bool
#define __Bah_realocate_arr(arr []ptr, nLength uint32)

//Temporary fix for gcc 14.1
#cLib "Wno-error=incompatible-pointer-types" "Wno-error=int-conversion" "Wno-error=implicit-function-declaration"

const null = <ptr>0

const true = <bool>1
const false = <bool>0

const cpstringLenSize = 4

#define! exit(i int)
#define! strcmp(a cpstring, b cpstring) int
#define! strlen(a cpstring) int
#define! sizeof(p ptr) uint32
#define len(a ptr) uint

cStr(s cpstring) char* {
	if <ptr>s == null {
		return null
	}
	return <char*>(<int>s + cpstringLenSize)
}

__bah_strlenSTR(s ptr) uint32 {
	if s == null {
		return 0
	}
	i uint32* = s
	return *i
}

//Compare two cpstrings.
//This function is used by the compiler.
__bah_strcmp(a cpstring, b cpstring) int {
	if <ptr>a == null || <ptr>b == null {
		return 1
	}
    return strcmp(a, b)
}
 
const strcmp = __bah_strcmp

//Gives the length of a cpstring.
//This is used by the compiler.
Cstrlen(s char*) int {
	if s == null {
		return 0
	}
	return noCheck(strlen(s))
}

const strlen = __bah_strlenSTR

#include "<stdio.h>"
#include "<unistd.h>"
#include "<sys/types.h>"
#include "<sys/stat.h>"
#include "<fcntl.h>"

#define! write(fd FILE*, t cpstring, l int)
#define! read(fd FILE*, t cpstring, l int) int

#define len(a ptr) uint

//Prints text to the terminal.
print(s cpstring) {
    write(<ptr>1, s, len(s))
}

#unoptimized {
	#define __BAH_memcpy(dest cpstring, source cpstring, l int)
	const memcpy = __BAH_memcpy
}

#optimized {
	#import "stdopti.bahstrp"
}

#include "memory.bah"

buffToStr(b char*) cpstring {
	l = strlen(<ptr>b)
	s = memoryAllocSTR(l+1)
	memcpy(s, b, l)
	ln uint32* = s
	*ln = l
	return s
}

argsToArr(a char**, l int) []cpstring {
    r = []cpstring
    allocateArray(r, l)
    i=0; for i < l, i++ {
        sp char** = <char**>(<int>a + i * sizeof(char*))
        s = *sp
        r[i] = buffToStr(s)
    }
    return r
}

cStrToBah(s char*) cpstring {
	if s == null {
		return null
	}
	l = strlen(<ptr>s)
	nstr = memoryAllocSTR(l+1)
	ln uint32* = nstr
	*ln = l
	memcpy(nstr, s, l)
	return nstr
} 

#define! alloca(s int) ptr
__Bah_multiple_concat(b cpstring*, l uint32) cpstring {
    lens uint32* = alloca(l * sizeof(uint32)) //stack list of lengths
    tot uint32 = 0 //total length
    offset int32 = 0 //offset for concatenation

    //calculate lengths of cpstrings and total length
    i=0; for i < l, i++ {
        sl = len(<cpstring>noCheck(b[i]))
        tot += sl
        noCheck(lens[i] = sl)
    }

    //allocate return cpstring
    r = memoryAllocSTR(tot + 1)

    //concatenate all cpstring
    i=0; for i < l, i++ {
        memcpy(<ptr>(<int>r + offset + cpstringLenSize), noCheck(b[i]+cpstringLenSize), noCheck(lens[i]))
        offset += <int>noCheck(lens[i])
    }

	ln uint32* = r
	*ln = tot

    return r
}

#cLib "lm"

#define! signal(sig int, hdl ptr)

#define! strlen(a cpstring) int
#define! strncpy(a cpstring, b cpstring, l int)
#define! strcat(a cpstring, b cpstring)

//Function used by the compiler when concatenating cpstrings.
//You can use it as a function or do cpstring+cpstring.
concatCPSTRING(a cpstring, b cpstring) cpstring {
	lenA = len(a)
	lenB = len(b)
	r cpstring = memoryAlloc(lenA + lenB + 1)
	strncpy(r,a,lenA)
	strcat(r,b)
	return r
}

//Funcion used by the compiler to declare a cpstring.
//It allocates memory for the cpstring.
__STR(a cpstring) cpstring {
	lenA = len(a)
	r cpstring = memoryAllocSTR(lenA+1)
	memcpy(r,a,lenA)
	ln uint32* = r
	*ln = lenA
	return r
}

//Converts a bah array to a C array.
cArr(arr ptr) ptr {
	a Bah_Array_Type* = arr
	return a.data
}

//Checks if a cpstring is null.
//This was used by the compiler before strcmp and strlen where made safe.
__checkString(s cpstring, l cpstring) bool {

	if <ptr>s == null {
		print("cpstring ("+l+") is null \n")
		exit(1)
	}

	return true
}

#include "channel.bah"
__BAH_panic_chan chan:cpstring = null

//Print an error to the terminal and exits the program.
//Please use panic() instead.
__Bah_common_panic(e cpstring) {
    if len(e) {
        print(e)
        print("\n")
		cleanShutDown()
    }
}

const panic = __Bah_common_panic

struct __Bah_fnName_mapper {
	p: ptr
	n: cpstring
}

__Bah_fnNames = []__Bah_fnName_mapper

//Used by the compiler to identify functions in backtrace.
__Bah_fnNames_append(fnn __Bah_fnName_mapper) {
	__Bah_fnNames[len(__Bah_fnNames)] = fnn
}

#linux {
	#define backtrace(arr ptr, l int) int
	#define! readlink(p cpstring, res char*, l int) int
}

#define! fgets(r char*, l int, f FILE*) char*
#define! popen(cmd cpstring, type cpstring) ptr
#define! pclose(hndl FILE*) int

fastExec(s cpstring) cpstring {
    hdl = popen(s, "r")

    buff = buffer 1024
    response cpstring = memoryAllocSTR(1)
	res = <ptr>response
	i=0; for res != null, i++ {
		memset(buff, 0, 1024)
		res = fgets(<char*>buff, 1023, hdl)
		if res == null || res == <ptr>-1 {
			break
		}
		response = memoryRealloc(response, (i+1)*1023)
		ln uint32* = response
		*ln = (i)*1023 + strlen(<ptr>buff)
		memcpy(<ptr>(<int>response + cpstringLenSize + i*1023), buff, 1024)
	}

    pclose(hdl)
	return response
}

#dynamic {
	#cLib "no-pie" //For the backtrace to work in dynamically linked executables
}

//Used by the compiler when panic() is called.
__BAH_panic(e cpstring, line cpstring) {

	if __BAH_panic_chan != null {
		e -> __BAH_panic_chan
		return
	}

	print("panic ("+line+"): "+e+"\n")
	
	#linux {
		arr = []ptr
		allocateArray(arr, 10)
		size = backtrace(noCheck(arr->data), 10)

		print("Backtrace:\n")

		min = -1
		max = -1

		selfPath = buffer 4096
		memset(selfPath, 0, 4096)
		readlink("/proc/self/exe", <char*>selfPath, 4096)

		i=1; for i < size, i++ {
			p int = arr[i]

			buff = buffer 4096
			memset(buff, 0, 4096)
			noCheck(sprintf(buff, cStr("addr2line %p -f -i -e %s"), p, selfPath))
			s = fastExec(buffToStr(<char*>buff))
			name = ""
			path = ""

			j=0; for j < len(s), j++ {
				if s[j] == <char>10 {
					name = s[:j]
					j++
					break
				}
			}

			path = s[j:len(s)-1]

			if name == "__BAH__main" || name == "main" {
				name = "main"
				path = "<internal>"
			}
			
			print("\t\033[33m"+name+"\033[m() \033[32m"+path+"\033[m \n")

			if name == "main" {
				break
			}
		}
	}

	cleanShutDown()
}

onMemoryError function()cpstring = null

//Used by the compiler, called when a memory error occurs.
__Bah_segfault_handle(sig int) {
	res = ""
	if onMemoryError != null {
		res = onMemoryError()
	}
	__BAH_panic("Memory error (segfault).\n"+res, "???")
}

//Used to register __Bah_segfault_handle().
__Bah_init_segfaultHandle() bool {
	signal(noCheck(SIGSEGV), __Bah_segfault_handle)
	return true
}

__Bah_init_segfaultHandle_OK = __Bah_init_segfaultHandle()


//Used for recovering from a panic instead exitting the program.
//It needs a  pointer to a non null cpstring which will get the message.
recover(s cpstring*) bool {
	__BAH_panic_chan = chan cpstring
	err = <- __BAH_panic_chan
	if s != null {
		*s = err
	}
	return true
}

//Used by the compiler in -verboseRuntime.
//This truncates cpstrings that are too long.
__Bah_safe_string(s cpstring) cpstring {
	if <ptr>s == null {
		return "(nil)"
	}
	if len(s) > 50 {
		a = strToArr(s)
		a[47] = '.'
		a[48] = '.'
		a[49] = '.'
		a[50] = <char>0
		s = arrToStr(a)
	}

	return "\""+s+"\""
}

__Bah_getVal_boundsChecked(arr []ptr, ind uint32, error cpstring) []ptr {
	if ind >= len(arr) {
		panic(error)
	}
	return arr
}

__Bah_realocate_arr(arr []ptr, nLength uint32) {
	if nLength < noCheck(arr->length) {
		return
	}

	if nLength != len(arr) {
		indexStr = buffer 65
		lengthStr = buffer 65

		noCheck(sprintf(indexStr, "%d"+4, nLength))
		noCheck(sprintf(lengthStr, "%d"+4, arr->length))

		panic("builtin: array append out of bounds violation, index = "+cStrToBah(<char*>indexStr)+" and len = "+cStrToBah(<char*>lengthStr)+". Can only append index=length.")
	}

	if nLength >= noCheck(arr->realLength) {
		if noCheck(arr->realLength) != 0 {
			noCheck(arr->realLength *= 2)
		} else {
			noCheck(arr->realLength = 50)
		}
		newPtr = memoryRealloc(noCheck(arr->data), <int>noCheck(arr->realLength) * <int>noCheck(arr->elemSize))
		rArr Bah_Array_Type* = arr
		rArr.data = newPtr
	}
	noCheck(arr->length = arr->length + 1)
	return
}


//Used for getting a character by its index inside a cpstring.
//Used cpstring[i] instead.
cpstringCharAt(s cpstring, i int) char {
    c = s[i]
    return c
}

//Used by the compiler for operations like cpstring[start:end].
cpstringSubsitute(s cpstring, i int, l int) cpstring {
	size = l - i
	if i < 0 || size < 0 || size > len(s) {
		panic("builtin: cpstring substitution out of bounds violation.")
	}
	ns = memoryAllocSTR(size+1)
	memcpy(ns, noCheck(s+i+cpstringLenSize), size)
	return ns
}

//Used by the compiler for operations like array[start:end].
arraySubstitute(arr []ptr, i int, l int) ptr {
	length = l - i
	if i < 0 || length < 0 || length > len(arr) {
		panic("builtin: cpstring substitution out of bounds violation.")
	}
	offset int = i * <int>noCheck(arr->elemSize)
	na = []ptr
	noCheck(na->elemSize = arr->elemSize)
	noCheck(na->length = length)

	allocLength = length
	if length > 50 {
		allocLength += allocLength % 50
	} else {
		allocLength = 50
	}
	size = allocLength * <int>noCheck(arr->elemSize)
	realSize = length * <int>noCheck(arr->elemSize)
	data = memoryAlloc(size)
	oData cpstring = noCheck(arr->data)
	memcpy(data, noCheck(oData + offset), realSize)
	noCheck(na->data = data)
	return na
}

#include "map.bah"

//This is used to efficiently construct cpstrings character by character.
//Note that if you want to create a substring of a string efficiently, you can use str[from:to] instead.
struct strBuilder {
    buff: cpstring
    length: uint32

	//Internal function
    _init() {
        this.buff = memoryAlloc(cpstringLenSize + 51)
        this.length = 50
    }

	//Used for appending a character to the end of the cpstring.
    append(c char) {
        ln uint32* = this.buff
        l = *ln
        if l >= this.length {
            this.length *= 2
            b = memoryRealloc(this.buff, this.length + cpstringLenSize + 1)
            this.buff = b
			ln = <uint32*>this.buff
        }
        noCheck(this->buff[cpstringLenSize + l] = c)
        *ln = l + 1
    }

	//Used for getting the resulting cpstring.
    str() cpstring {
		l = *(<uint32*>this.buff)
        return this.buff
    }

}