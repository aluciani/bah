 
#include "json.bah"
#include "eval.bah"

DEBUG_ENABLED = false

#define breakPoint()

const __debug_ASCII_RESET = "\033[0m"

const __debug_ASCII_YELLOW = "\033[33m"
const __debug_ASCII_BLUE = "\033[36m"
const __debug_ASCII_GREEN = "\033[32m"
const __debug_ASCII_MAGENTA = "\033[35m"
const __debug_ASCII_GREY = "\033[2m"

__parse_debug_cmd(syms []reflectElement) {
    for 1 == 1 {
        print("> ")
        cmd = stdinput()
        if cmd == "list" {
            println("Listting all symbols.")
            i=0; for i < len(syms), i++ {
                s = syms[i]
                println("\t"+__debug_ASCII_BLUE+s.name +__debug_ASCII_RESET+ " ("+__debug_ASCII_MAGENTA+s.type+__debug_ASCII_RESET+")")
            }
        } else if cmd == "continue" || cmd == "c" {
            println("Resuming execution.")
            break
        } else if cmd == "quit" || cmd == "q" {
            println("Exitting program")
            exit(0)
        } else if strHasPrefix(cmd, "print ") || strHasPrefix(cmd, "p ") {
            args = splitString(string(cmd), " ")
            i=1; for i < len(args), i++ {
                a = args[i]
                sym = __debug_get_sym(syms, a)
                if sym.type == "cpstring" {
                    p ptr* = sym.value
                    sym.value = *p
                }
                println(toJson(sym))
            }
        } else if strHasPrefix(cmd, "set ") {
            cmdS = string(cmd)
            cmdS.trimLeft(4)
            a = string(splitStringBefore(cmdS, "="))
            v = string(cmdS.str())
            v.trimLeft(a.length + 1)
            a.trim()
            v.trim()

            i=a.length-1; for i != 0 {
                if isSpace(a.charAt(i)) {
                    a.trimRight(1)
                } else {
                    break
                }
            }

            s = __debug_get_sym(syms, a)
            println("Setting "+a.str())
            json = parseJson(v.str())
            json.scan(s)
        } else if strHasPrefix(cmd, "eval ") {
            cmdS = string(cmd)
            cmdS.trimLeft(5)
            cmdS.trim()

            evalRaw(cmdS.str(), syms)
        } else {
            println("Unknown command '"+cmd+"'.
Here are all available commands:
- list (Lists all symbols)
- continue [c] (Continue execution of the program)
- print [p] <var> (Prints the content of a variable)
- set <var> = <val> (Sets the content of a variable)
- quit [q] (Exit the program)")
        }
    }
}

breakPoint__inner(syms []reflectElement, line cpstring) {
    if DEBUG_ENABLED == false {
        return
    }
    println("============")
    println("BREAKPOINT: "+__debug_ASCII_GREEN+line+__debug_ASCII_RESET)
    __parse_debug_cmd(syms)
    println("============")
}