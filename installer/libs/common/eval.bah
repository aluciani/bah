#import "reflect.bah"

//An internal description of a function and its evaluation wrapper.
struct __eval_binding {
    name: str
    evalFn: ptr
}

//Internal C type array of all evaluation wrappers.
__evals_bindings __eval_binding*
__evals_length = 0

//To call a function by name with arguments passed as an array of pointers.
evalCall(fn str, args []ptr) ptr {
    i=0; for i < __evals_length, i++ {
        e __eval_binding = noCheck(__evals_bindings[i])
        if e.name == fn {
            bfn function(ptr)ptr = e.evalFn
            r = bfn(args)
            return r
        }
    }
    panic("eval: unknown/not evaluable function "+fn+"()")
    return null
}

//To eval simple Bah code with variables passed as an array of reflectElement.
//This will return a pointer to the result.
evalRaw(code str, syms []reflectElement) ptr {
    scode = string(code)
    fnName = splitStringBefore(scode, "(")


    args = []ptr
    currArg = []char
    isStr = false
    i=len(fnName)+1; for i < len(code), i++ {
        c = code[i]
        if c == ',' || c == ')' || c == '(' {
            if len(currArg) == 0 {
                continue
            }

            if c == '(' {
                nbPar = 0
                for i < len(code), i++ {
                    c = code[i]
                    if c == '(' {
                        nbPar++
                    } else if c == ')' {
                        nbPar--
                    }
                    currArg[len(currArg)] = c
                    if nbPar == 0 {
                        break
                    }
                }
                currArg[len(currArg)] = <char>0
                args[len(args)] = evalRaw(arrToStr(currArg), syms)
                
                currArg = []char
                isStr = false
                continue
            }

            currArg[len(currArg)] = <char>0
            if isStr == true {
                delete(currArg, 0)
                currArg[len(currArg)-2] = <char>0
                args[len(args)] = arrToStr(currArg)
            } else if isNumber(currArg[0]) || currArg[0] == '-' {
                if '.' in currArg {
                    p float* = memoryAlloc(SIZE_OF_FLOAT)
                    *p = strToFloat(arrToStr(currArg))
                    args[len(args)] = p
                } else {
                    p int* = memoryAlloc(SIZE_OF_INT)
                    *p = strToInt(arrToStr(currArg))
                    args[len(args)] = p
                }
            } else if arrToStr(currArg) == "true" || arrToStr(currArg) == "false" || arrToStr(currArg) == "null" {
                    p int* = memoryAlloc(SIZE_OF_INT)
                    if arrToStr(currArg) == "true" {
                        *p = 1
                    } else {
                        *p = 0
                    }
                    args[len(args)] = p                
            } else if isLetter(currArg[0]) {
                if syms != null {
                    sym reflectElement
                    if '[' in currArg {
                        name = []char
                        ind = []char
                        j=0; for j < len(currArg), j++ {
                            if currArg[j] == '[' {
                                name[j] = <char>0
                                j++
                                for j < len(currArg), j++ {
                                    if currArg[j] == ']' {
                                        break
                                    }
                                    ind[len(ind)] = currArg[j]
                                }
                                ind[len(ind)] = <char>0
                                break
                            }
                            name[j] = currArg[j]
                        }
                        symArr = __debug_get_sym(syms, string(arrToStr(name)))
                        if symArr.isArray == false {
                            panic("eval: cannot use '"+arrToStr(name)+"' as an array.")
                        }

                        p ptr* = symArr.value
                        tmpArr = []ptr
                        tmpArr = *p

                        es int = noCheck(tmpArr->elemSize)
                        offset = es * strToInt(arrToStr(ind))

                        ae = symArr.arrayElem
                        sym = *ae
                        base char* = noCheck(tmpArr->data)
                        sym.value = noCheck(base + offset)
                    } else {
                        sym = __debug_get_sym(syms, string(arrToStr(currArg)))
                    }
                    if sym.type == "str" {
                        p ptr* = sym.value
                        args[len(args)] = *p
                    } else {
                        args[len(args)] = sym.value
                    }
                }
            }
            currArg = []char
            isStr = false
            continue
        }
        if c == <char>34 {
            isStr = true
        }
        if isStr == false && isSpace(c) {
            continue
        }
        currArg[len(currArg)] = c
    }

    if strCount(fnName, ".") > 0 {
        sFnName = string(fnName)
        vName = string(splitStringBefore(sFnName, "."))
        sym = __debug_get_sym(syms, vName)
        sFnName.trimLeft(vName.length + 1)
        vType = string(sym.type)
        isPtr = vType.count("*") > 0
        vType.replace("*", "")
        fnName = vType.str() + "__" + sFnName.str()
        nArgs = []ptr{sym.value}
        i=0; for i < len(args), i++ {
            nArgs[i+1] = args[i]
        }
        args = nArgs
    }

    return evalCall(fnName, args)
}

//Used for evaluating simple Bah code and scan the result to r.
eval(code str, r reflectElement) {
    
    fnReturns = evalRaw(code, null)

    if r.name == "null" || r.value == null || fnReturns == null {
        return
    }

    if r.type == "int*" || r.type == "bool*" {
        p int* = r.value
        fr int* = fnReturns
        *p = *fr
    } else if r.type == "float*" {
        p float* = r.value
        fr float* = fnReturns
        *p = *fr
    } else if r.type == "str*" {
        p str* = r.value
        fr str = fnReturns
        *p = fr
    } else if r.type == "ptr" {
        p ptr* = r.value
        *p = fnReturns
    } else {
        p ptr = r.value
        memcpy(p, fnReturns, r.size)
    }

}