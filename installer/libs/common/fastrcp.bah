 
#include "<stdio.h>"
#include "<stdlib.h>"
#include "<unistd.h>"
#include "<pthread.h>"


#cLib "lpthread"

#define! malloc(s int) ptr
#define! realloc(p ptr, s int) ptr
#define! free(a ptr)

#define! pthread_mutex_t int

#define! pthread_mutex_init(lock pthread_mutex_t*, m int)
#define! pthread_mutex_lock(lock pthread_mutex_t*)
#define! pthread_mutex_unlock(lock pthread_mutex_t*)
#define! pthread_mutex_destroy(lock pthread_mutex_t*)

#define! pthread_create(id int*, attr ptr, func ptr, args ptr)
#define! pthread_join(id int, ret ptr)


#define RCP_register(p ptr, s int)
#define RCP_remove(p ptr)
#define RCP_setNewPtr(o ptr, n ptr)


//Destroy will force to free a pointer.
destroy(a ptr) {
    RCP_remove(a)
    free(a)
}

struct RCP {
    c: int = 0
    s: int = 0
    //for compatibility
    __RCP_counter: ptr
}

#define! memcpy(dest ptr, src ptr, s int)
#define! sbrk(i int) ptr

struct RCPstate {
    heapTop: ptr
    heapBottom: ptr

    //for compatibility
    __RCP_counter: ptr

    getByPtr(p ptr) RCP* {
        if p > this.heapTop || p < this.heapBottom {
            noCheck(printf("skipping "))
            if p < this.heapBottom {
                noCheck(printf("on the stack\n"))
            } else {
                noCheck(printf("...\n"))
            }
            return null
        }
        if p == null {
            return null
        }

        pc char* = p
        return noCheck(pc - sizeof(struct RCP))
    }
}

RCPstate RCPstate



RCP_init() {
    RCPstate = RCPstate{}
    RCPstate.heapTop = sbrk(0)
    RCPstate.heapBottom = malloc(8)
}

#define! exit(e int)

RCP_shutdown() {
    free(RCPstate.heapBottom)
}

cleanShutDown() {
    RCP_shutdown()
    exit(1)
}

RCP_selfRef(a ptr, b ptr) bool {
    return a == b
}

RCP_register(p ptr, s int) {
    if p == null {
        return
    }
    r = RCP{}
    r.c = 1
    r.s = s
    prcp RCP* = p
    *prcp = r
}

RCP_setNewPtr(o ptr, n ptr) {
    if o == null || n == null || o == n {
        return
    }
    r = RCPstate.getByPtr(o)
    if r == null {
        return
    }
    nr = RCPstate.getByPtr(n)
    *nr = *r
}

RCP_remove(p ptr) {
    if p == null {
        return
    }
    r = RCPstate.getByPtr(p)
    if r == null {
        return
    }
    free(r)
}

RCP_incr(p ptr) {
    if p == null {
        return
    }
    r = RCPstate.getByPtr(p)
    if r == null {
        return
    }
    r.c = r.c + 1
}

RCP_getCount(p ptr) int {
    if p == null {
        return 0
    }
    r = RCPstate.getByPtr(p)
    if r == null {
        return 0
    }

    return r.c

}

RCP_isAllocated(p ptr) bool {
    if p == null {
        return false
    }
    r = RCPstate.getByPtr(p)
    if r == null {
        return false
    }
    return true
}

RCP_decr(p ptr) {
    if p == null {
        return
    }
    r = RCPstate.getByPtr(p)
    if r == null {
        return
    }
    r.c = r.c - 1
    if r.c <= 0 {
        free(r)
    }
}

RCP_incrIL(p ptr*) ptr {
    RCP_incr(*p)
    return p
}

RCP_decrIL(p ptr*) ptr {
    RCP_decr(*p)
    return p
}

RCP_decrCounter(c int*) int {
    if c == null {
        return 0
    }
    *c = *c - 1
    if *c <= 0 {
        free(c)
        return 0
    }
    return *c
}

RCP_incrCounter(c int*) int {
    *c = *c + 1
    return *c
}

RCP_request(p ptr) RCP* {
    if p == null {
        return null
    }
    return RCPstate.getByPtr(p)
}

RCP_decrRCP(r RCP*) {
    if r == null {
        return
    }
    r.c = r.c - 1
    if r.c <= 0 {
        free(r)
    }
}


//Used for allocating memory (malloc in c). You must specify the size of the block to allocate.
//Will return a pointer to the allocated block. The memory is garbage collected.
//**The given memory is initiated with zeros.**
//The allocated memory cannot be shared by multiple processes. Use the sharedMemory() function instead.
memoryAlloc(s int) ptr {
    r char* = malloc(s + noCheck(sizeof(struct RCP)))
    RCPstate.heapTop = sbrk(0)
    memset(r, 0, s + noCheck(sizeof(struct RCP)))
    RCP_register(r, s)
    return noCheck(r + noCheck(sizeof(struct RCP)))
}

memoryAllocNZ(s int) ptr {
    r char* = malloc(s + noCheck(sizeof(struct RCP)))
    RCPstate.heapTop = sbrk(0)
    RCP_register(r, s)
    return noCheck(r + noCheck(sizeof(struct RCP)))
}


//Will realloc memory to a specified pointer.
memoryRealloc(p ptr, s int) ptr {
    if p == null {
        return memoryAlloc(s)
    }
    or = RCPstate.getByPtr(p)
    r = memoryAllocNZ(s)

    ns = or.s
    if or.s >= s {
        ns = s
    } else {
        rc char* = r
        memset(noCheck(rc + or.s), 0, s - or.s)
    }

    memcpy(r, p, ns)
    RCP_decrRCP(or)
    return r
}


//Clear will remove the content of an array.
clear(a ptr) {
    if RCP_isAllocated(a) == false {
        return
    }
    noCheck(array(void*) * arr = a)
    noCheck(RCP_decr(arr->data))
    noCheck(arr->data = memoryAlloc(sizeof(0)))
    noCheck(arr->length = 0)
}