
#linux {
    #cLib "lgc" "lpthread"
}

#darwin {
    #cLib "lgc" "lpthread"
}

#windows {
    #cLib "l:gc.a" "lpthread"
}

#define GC_init()
#define GC_malloc(s uint) ptr
#define GC_realloc(p ptr, s uint) ptr
#define GC_free(a ptr)
#define GC_register_finalizer_ignore_self(obj ptr, proc ptr, data ptr, ofn ptr, ocd ptr)
#define GC_malloc_atomic(s uint) ptr
#define GC_malloc_ignore_off_page(s uint) ptr

//Used for allocating memory (malloc in c). You must specify the size of the block to allocate.
//Will return a pointer to the allocated block. The memory is garbage collected.
//**The given memory is initiated with zeros.**
//The allocated memory cannot be shared by multiple processes. Use the sharedMemory() function instead.
memoryAlloc(s uint) ptr {
    return GC_malloc(s)
}

const initiateMemory = GC_init

//This function should be used with care!
//Allocates memory that CANNOT contain any pointer.
//Not respecting the last rule would lead to crashes. 
memoryAllocAtomic(s uint) ptr {
    return GC_malloc_atomic(s)
}

//Destroy will force to free a pointer.
destroy(a ptr) {
    GC_free(a)
}

//Clear will remove the content of an array.
clear(a ptr) {
    arr Bah_Array_Type* = a
    arr.length = 0
}


//Will realloc memory to a specified pointer.
memoryRealloc(p ptr, s uint) ptr {
    return GC_realloc(p,s)
}

//Shuts down the program.
cleanShutDown() {
    exit(1)
    return
}

//Used for setting an end of line registerer to an allocated pointer.
memoryOnEnd(obj ptr, fn ptr) {
    GC_register_finalizer_ignore_self(obj, fn, null, null, null)
}

//The Bah version of memcpy.
//This will copy l bytes from the source to the end.
//A faster version is available with -optimize.
//This is called when calling memcpy().
__BAH_memcpy(dest char*, source char*, l uint) {
    lm int32 = l % sizeof(int)
    i int32
    for lm != 0, lm-- {
        i = l - lm
        noCheck(dest[i] = source[i])
    }
    destI int* = <ptr>(<int>dest - sizeof(int))
    sourceI int* = <ptr>(<int>source - sizeof(int))
    i=l/sizeof(int); for i != 0, i-- {
        noCheck(destI[i] = sourceI[i])
    }
}


//Used for allocating memory for a str.
//The content of the memory block should not contain any pointer.
//It will not be checked for memory collection.
memoryAllocSTR(s uint) str {
    r str = GC_malloc_atomic(s + strLenSize)
    ln uint* = r
    *ln = (s-1)
    noCheck(r[s - 1 + strLenSize] = 0)
    return r
}