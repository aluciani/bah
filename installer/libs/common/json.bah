#include "string.bah"
#include "iostream.bah"
#include "reflect.bah"


const JSON_TYPE_STRING = 0
const JSON_TYPE_INT = 1
const JSON_TYPE_FLOAT = 2
const JSON_TYPE_ARRAY = 3
const JSON_TYPE_MAP = 4

//A single element of a json document.
//This can be a map, an array, an int, a float or a string.
//If the element is of type array (or map), all of its children will be contained in an array, the .children field.
struct jsonElement {
    type: int
    key: cpstring
    content: cpstring
    children: []jsonElement*

    //If the current element is of type map, this method is used to get a children element mapped to this key.
    map(key cpstring) jsonElement* {
        l = len(this.children)
        i=0; for i < l {
            elem = this.children[i]
            fc = cpstringCharAt(elem.key,0)
            if fc == <char>34 {
                nk = []char
                lk = strlen(elem.key)
                j=1; for j < lk - 1 {
                    c = cpstringCharAt(elem.key, j)
                    nk[j-1] = c
                    j = j + 1
                }
                if arrAsStr(nk) == key {
                    return elem
                }
            } else {
                if elem.key == key {
                    return elem
                }
            }
            i = i + 1
        }
        z = <ptr>0
        return z
    }

    //To get the current element as a cpstring no matter its type.
    str() cpstring {
        ctn = this.content
        return ctn
    }

    //Used for scanning the JSON element to a var.
    scan(e reflectElement) {
        //Mapping an object to a struct
        if e.isStruct == true {
            i=0; for i < len(e.structLayout) {
                m = e.structLayout[i]
                ov = this.map(m.name)
                if ov != null {
                    ov.scan(m)
                }
                i = i + 1
            }
        } else if e.type == "int" {
            ep int* = e.value
            *ep = strToInt(this.content)
        } else if e.type == "cpstring" {
            ep cpstring* = e.value
            *ep = memoryAlloc(strlen(this.content))
            strcpy(*ep, this.content)
        } else if e.type == "float" {
            ep float* = e.value
            *ep = strToFloat(this.content)
        } else if e.type == "bool" {
            ep bool* = e.value
            if this.content == "1" || this.content == "true" {
                *ep = true
            } else {
                *ep = false
            }
        }

    }

}

//To parse a json document.
//This will return a pointer to the main element.
parseJson(s cpstring) jsonElement* {
    jsonElem = new jsonElement
    lenS = strlen(s)

    i=0; for i < lenS {
        if isSpace(cpstringCharAt(s, i)) == 0 {
            break
        }
        i = i + 1
    }

    fc = cpstringCharAt(s, i)
    if fc == '[' {
        jsonElem.type = JSON_TYPE_ARRAY
    } else if fc == '{' {
        jsonElem.type = JSON_TYPE_MAP
    } else if fc == <char>34 {
        jsonElem.type = JSON_TYPE_STRING
        ns = []char
        i = i + 1
        for i < lenS - 1 {
            ns[len(ns)] = cpstringCharAt(s,i)
            i = i + 1
        }
        jsonElem.content = arrToStr(ns)
    } else if isNumber(fc) {
        isFloat = false
        for i < lenS {
            if cpstringCharAt(s,i) == '.' {
                isFloat = true
                break
            }
            i = i + 1
        }

        if isFloat == true {
            jsonElem.type = JSON_TYPE_FLOAT
        } else {
            jsonElem.type = JSON_TYPE_INT
        }
        jsonElem.content = s
    } else {
        jsonElem.type = JSON_TYPE_STRING
        jsonElem.content = s
    }

    if jsonElem.type == JSON_TYPE_ARRAY {
        i = i + 1

        trim = 1
        j=lenS-1; for j >= 0 {
            c = cpstringCharAt(s, j)
            if isSpace(c) {
                trim = trim + 1
            } else {
                break
            }
            j = j - 1
        }

        for i < lenS - 1 {
            c = cpstringCharAt(s, i)
            if isSpace(c) == 0 {
                break
            }
            i = i + 1
        }
        currentElem = []char
        currentBracks = 0
        currentBraces = 0
        currentQuotes = 0
        elemIndex = 0
        for i < lenS - trim {
            c = cpstringCharAt(s, i)
            if c == <char>34 {
                if currentQuotes == 0 {
                    currentQuotes = 1
                } else {
                    currentQuotes = 0
                }
            }else if c == '[' {
                currentBracks = currentBracks + 1
            } else if c == ']' {
                currentBracks = currentBracks - 1
            } else if c == '{' {
                currentBraces = currentBraces + 1
            } else if c == '}' {
                currentBraces = currentBraces - 1
            }
            total = currentBracks + currentBraces + currentQuotes
            if total > 0 {
                currentElem[len(currentElem)] = c
                i = i + 1
                continue
            }
            if c == ',' {
                jsonElem.children[elemIndex] = parseJson(arrAsStr(currentElem))
                clear(currentElem)
                elemIndex = elemIndex + 1
            } else {
                if isSpace(c) {
                    i = i + 1
                    continue
                }
                currentElem[len(currentElem)] = c
            }
            i = i + 1
        }
        jsonElem.children[elemIndex] = parseJson(arrAsStr(currentElem))
    } else if jsonElem.type == JSON_TYPE_MAP {
        i = i + 1
        trim = 1
        j=lenS-1; for j >= 0 {
            c = cpstringCharAt(s, j)
            if isSpace(c) {
                trim = trim + 1
            } else {
                break
            }
            j = j - 1
        }
        for i < lenS - 1 {
            c = cpstringCharAt(s, i)
            if isSpace(c) == 0 {
                break
            }
            i = i + 1
        }
        currentElem = []char
        currentKey = []char
        isVal = 0
        currentBracks = 0
        currentBraces = 0
        currentQuotes = 0
        elemIndex = 0
        for i < lenS-trim {
            c = cpstringCharAt(s,i)
            if c == <char>34 {
                if currentQuotes == 0 {
                    currentQuotes = 1
                } else {
                    currentQuotes = 0
                }
            }else if c == '[' {
                currentBracks = currentBracks + 1
            } else if c == ']' {
                currentBracks = currentBracks - 1
            } else if c == '{' {
                currentBraces = currentBraces + 1
            } else if c == '}' {
                currentBraces = currentBraces - 1
            }
            total = currentBracks + currentBraces + currentQuotes
            if total > 0 {
                if isVal == 1 {
                    currentElem[len(currentElem)] = c
                } else {
                    currentKey[len(currentKey)] = c
                }
                i = i + 1
                continue
            }
            if c == ':' {
                isVal = 1
            }else if c == ',' {
                elem = parseJson(arrToStr(currentElem))
                elem.key = arrToStr(currentKey)
                clear(currentElem)
                clear(currentKey)
                isVal = 0
                jsonElem.children[elemIndex] = elem
                elemIndex = elemIndex + 1
            } else {
                if isSpace(c) {
                    i = i + 1
                    continue
                }
                if isVal == 1 {
                    currentElem[len(currentElem)] = c
                } else {
                    currentKey[len(currentKey)] = c
                }
            }
            i = i + 1
        }
        elem = parseJson(arrToStr(currentElem))
        elem.key = arrToStr(currentKey)
        jsonElem.children[elemIndex] = elem
    }

    return jsonElem
}

toJson__inner(e reflectElement, isMember bool, tabs int) cpstring {
    if e.isStruct == true {
        tabs = tabs + 1
        tabsStr = ""
        i=0; for i < tabs {
            tabsStr = tabsStr + "\t"
            i = i + 1
        }
        s = "{\n"
        i=0; for i < len(e.structLayout) {
            m = e.structLayout[i]
            i = i + 1
            if i < len(e.structLayout) {
                s = s + tabsStr+"\""+m.name+"\": "+toJson__inner(m, true, tabs)+",\n"
            } else {
                s = s + tabsStr+"\""+m.name+"\": "+toJson__inner(m, true, tabs)+"\n"
            }
        }
        tabs = tabs - 1
        tabsStr = ""
        i=0; for i < tabs {
            tabsStr = tabsStr + "\t"
            i = i + 1
        }
        s = s + tabsStr+"}"
        return s
    } else if e.type == "int" {
        ip int* = e.value
        return intToStr(*ip)
    } else if e.type == "float" {
        fp float* = e.value
        return floatToStr(*fp)
    } else if e.type == "cpstring" {
        if isMember == false {
            s = string(e.value)
            s.replace("\"", "\\\"")
            s.replace("\n", "\\\n")
            return "\""+s.str()+"\""
        } else {
            sp cpstring* = e.value
            s = string(*sp)
            s.replace("\"", "\\\"")
            s.replace("\n", "\\\n")
            return "\""+s.str()+"\""
        }
    }
    return ""
}

toJson(e reflectElement) cpstring {
    return toJson__inner(e, false, 0)
}

//Example
// #include "iostream.bah"
// #include "json.bah"
// main() {
// unparsed = "[54, {\"key\":[0,1]}, \"element\"]"
// json = parseJson(unparsed)
// fiftyfor = json.children[0]
// println(fiftyfor.content)
// jsonMap = json.children[1]
// jsonArray = jsonMap.map("key")
// println(jsonArray.content)
// }