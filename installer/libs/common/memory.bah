#define! void ptr

//Size of an int, use sizeof(int) instead.
const SIZE_OF_INT = 8
const SIZE_OF_CHAR = 1
const SIZE_OF_INT32 = 4
const SIZE_OF_FLOAT32 = 4
const SIZE_OF_FLOAT = 8


//Will return the length of an array.
//This only works on arrays.
len(a ptr) uint {
    if a == null {
        return 0
    }
    arr Bah_Array_Type* = a
    return arr.length
}

#include "BAH_MEM_COLLECTOR"

//Append will add the array b to the array a.
//Note: doesn't work with []char.
append(a ptr, b ptr) {
    arrA Bah_Array_Type* = a
    arrB Bah_Array_Type* = b
    lenA = 0
    lenB = 0
    realSizeA = 0
    realSizeB = 0
    lenA = arrA.length
    lenB = arrB.length

    if lenB == 0 {
        return
    }

    if lenA == 0 {
        arrA.data = arrB.data
        arrA.length = arrB.length
        return
    }

    realSizeA = lenA * arrA.elemSize
    realSizeB = lenB * arrB.elemSize


    buff = memoryAlloc(realSizeA + realSizeB+32)
    memcpy(buff, arrA.data, realSizeA)
    memcpy(<ptr>(<int>buff+lenA), arrB.data, realSizeB)
    arrA.length = lenA + lenB
    arrA.data = buff
}

//Copy the content of array b to array a.
copy(a ptr, b ptr) {
    arrA Bah_Array_Type* = a
    arrB Bah_Array_Type* = b
    lenB = 0
    realSizeB = 0
    lenB = arrB.length
    realSizeB = lenB * arrB.elemSize
    arrA.data = memoryAlloc(realSizeB)
    memcpy(arrA.data, arrB.data, realSizeB)
    arrA.length = arrB.length
}

#windows {
    #define CreateFileMappingA(ihv ptr, sec int32, rw int32, mos int32, bs uint, fn char*) ptr
    #define MapViewOfFile(f ptr, sec int32, mi1 int32, mi2 int32, bs uint) ptr
    #define CloseHandle(mf ptr)

    const SECTION_QUERY                 = 0x0001
    const SECTION_MAP_WRITE             = 0x0002
    const SECTION_MAP_READ              = 0x0004
    const SECTION_MAP_EXECUTE           = 0x0008
    const SECTION_EXTEND_SIZE           = 0x0010
    const SECTION_MAP_EXECUTE_EXPLICIT  = 0x0020

    const STANDARD_RIGHTS_REQUIRED  = 0x000f0000

    const SECTION_ALL_ACCESS    = 983071

    const PROT_READ             = 2
    const PROT_READWRITE        = 4
    const FILE_MAP_WRITE        = SECTION_MAP_WRITE
    const FILE_MAP_READ         = SECTION_MAP_READ
    const FILE_MAP_ALL_ACCESS   = SECTION_ALL_ACCESS
    const FILE_MAP_COPY         = 0x1
    const FILE_MAP_RESERVE      = 0x80000000


    GLOBAL_MAPPED_MEMORY_FILE ptr
}

//Will allocate a page of shared memory and returns a pointer to it.
//The size should be an multiple of 4096. A size of 0 will set the page size to the default (4096).
//Shared memory can be shared between two processes (after the use of fork()).
sharedMemory(size uint) ptr {
    if size == 0 {
        size = 4096
    }
    #linux {
        r = mmap(0, size, PROT_READ + PROT_WRITE, MAP_SHARED + MAP_ANONYMOUS, -1, 0)
    }
    #darwin {
        r = mmap(0, size, PROT_READ + PROT_WRITE, MAP_SHARED + MAP_ANONYMOUS, -1, 0)
    }
    #windows {
        if GLOBAL_MAPPED_MEMORY_FILE == null {
            GLOBAL_MAPPED_MEMORY_FILE = CreateFileMappingA(-1, 0, PROT_READWRITE, 0, size, "Global\\BahFileMap")
        }
        if GLOBAL_MAPPED_MEMORY_FILE == null {
            print("sharedMemory: could not make map file.")
            exit(1)
        }
        r ptr
        r = MapViewOfFile(GLOBAL_MAPPED_MEMORY_FILE, FILE_MAP_ALL_ACCESS, 0, 0, size)
    }
    return r
}

#windows {
    //On windows, you will need to close the mapped file.
    //*This is a windows only thing.*
    closeSharedMemory() {
        CloseHandle(GLOBAL_MAPPED_MEMORY_FILE)
    }
}

//Used for pre-allocating a number of element to an array.
//The content of the array is not initialized, it may contain garbage.
allocateArray(arr ptr, nbElems uint) {
    a Bah_Array_Type* = arr
    a.length = nbElems
    a.realLength = nbElems
    a.data = memoryAlloc(nbElems * a.elemSize)
}


//Example
// #include "string.bah"
// #include "memory.bah"
// main() {
//     a str = memoryAlloc(30)
//     strcpy(a, "Hi!")
// }

//Used for deleting an element from an array by its index.
//This will keep the order of the elements.
delete(a ptr, i uint) {
    arr Bah_Array_Type* = a
    length = len(<[]ptr>a)
    if i >= length || i < 0 {
        return
    }
	if i == length-1 {
		arr.length--
		return
	}
    elemSize int = arr.elemSize
    data char* = arr.data
    destOffset = elemSize * i
    i++
    offset = elemSize * i
    src char* = <int>data + <int>offset
    dest char* = <int>data + <int>destOffset
    rightNB = length - (i)

    #rcp {
        if elemSize >= sizeof(ptr) {
            RCP_decrScan(dest, elemSize)
        }
    }


    memmove(dest, src, rightNB * elemSize)
    arr.length--
}

//Like delete() but for a range.
//deleteRange(arr, 1, 3) will delete elements at indexes [1, 2, 3]
deleteRange(a ptr, from uint, to uint) {
    if from == to {
        delete(a, from)
        return
    }


    arr Bah_Array_Type* = a
    length = arr.length
    
    elemSize int = arr.elemSize
    data char* = arr.data
    size = elemSize * (to - from)
    dest ptr = <int>data + elemSize * from
    src ptr = <int>dest + size + elemSize
    rightNB = length - to - 1

    #rcp {
        if elemSize >= sizeof(ptr) {
            RCP_decrScan(<ptr>(<int>data + elemSize * from), elemSize * (to - from + 1))
        }
    }

    memmove(dest, src, rightNB * elemSize)
    arr.length -= (to - from + 1)
}


//Used to convert an array of characters to a str.
arrToStr(arr []char) str {
    strLen = len(arr)
    if len(arr) > 0 && arr[len(arr)-1] == null {
        strLen--
    }
    a Bah_Array_Type* = arr
    str str = memoryAllocSTR(strLen+1)
    memcpy(<ptr>(<uint>str + strLenSize), a.data, strLen)
    ln uint* = str
    *ln = strLen
    return str
}

//Used to convert a str into an array of characters.
strToArr(str str) []char {
    strLen = len(str)
    arr = []char
    a Bah_Array_Type* = arr
    a.data = memoryAlloc(strLen+1)
    memcpy(a.data, <ptr>(<uint>str + strLenSize), strLen)
    a.length = strLen
    
    return arr
}

//Removed arrAsStr() and strAsArr() because they are too dangerous

//Trims i chars at the beginning of a str.
strTrimLeft(s str*, i uint) {
    rs = *s
    *s = rs[i:]
}

//Trims i chars at the end of a str.
strTrimRight(s str*, i uint) {
    rs = *s
    *s = rs[:len(rs)-i]
}

const __bah_memory_realloc = memoryRealloc
const __bah_memory_str = memoryAllocSTR