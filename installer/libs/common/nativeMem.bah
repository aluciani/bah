#define malloc(s uint) ptr
#define free(p ptr)
#define realloc(o ptr, s uint) ptr

#define! usleep(us uint)

#define memoryAlloc(s uint) ptr
#define memoryAllocSTR(s uint) str
#define memoryRealloc(o ptr, s uint) ptr

// memoryAlloc(s int) ptr {
//     p = malloc(s)
//     memset(p, null, s)
//     return p
// }

// memoryRealloc(o ptr, s int) ptr {
//     if o == null {
//         return memoryAlloc(s)
//     }
//     // os = malloc_usable_size(o)
//     p = realloc(o,s)
//     // memset(<ptr>(<int>p + os), null, s - os - 1)
//     return p
// }

clear(a ptr) {
    arr Bah_Array_Type* = a
    arr.length = 0
}

cleanShutDown() {
    exit(0)
}

__BAH_memcpy(dest str, source str, l uint) {
    lm = l % sizeof(int)
    if lm != 0 {
        for lm != 0, lm-- {
            i = l - lm
            noCheck(dest[i] = source[i])
        }
    }
    destI int* = <ptr>(<int>dest - sizeof(int))
    sourceI int* = <ptr>(<int>source - sizeof(int))
    i=l/sizeof(int); for i != 0, i-- {
        noCheck(destI[i] = sourceI[i])
    }
}
