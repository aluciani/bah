#include "<stdio.h>"
#include "<stdlib.h>"
#include "<unistd.h>"
#include "<pthread.h>"
#include "<malloc.h>"

#cLib "lpthread"

#define! malloc(s int) ptr
#define! realloc(p ptr, s int) ptr
#define! free(a ptr)

#define! pthread_mutex_t int

#define! pthread_mutex_init(lock pthread_mutex_t*, m int)
#define! pthread_mutex_lock(lock pthread_mutex_t*)
#define! pthread_mutex_unlock(lock pthread_mutex_t*)
#define! pthread_mutex_destroy(lock pthread_mutex_t*)

//Destroy will force to free a pointer.
destroy(a ptr) {
    free(a)
}

__BAH_rcp_min = 0
__BAH_rcp_max = 0

struct __BAH_rcp_tree {
    less: __BAH_rcp_tree*
    more: __BAH_rcp_tree*
    parent: __BAH_rcp_tree*
    size: uint32
    count: uint32
}

__BAH_rcp_treeBase __BAH_rcp_tree* = null

__BAH_rcp_mutex pthread_mutex_t

#define! exit(e int)
#define panic(s cpstring)
#define RCP_decrImmediate(p ptr, s int32, strict bool)
#define RCP_incrImmediate(p ptr, s int32, strict bool)


RCP_init() {
    pthread_mutex_init(&__BAH_rcp_mutex, 0)
}


RCP_printTree(pt __BAH_rcp_tree*, count int*) {
    noCheck(printf("Still alive: %p (%d references)\n"+4, pt+sizeof(struct __BAH_rcp_tree), pt->count))
    *count++
    if pt.more != null {
        RCP_printTree(pt.more, count)
    }
    if pt.less != null {
        RCP_printTree(pt.less, count)
    }
}

RCP_shutdown() {
    pthread_mutex_destroy(&__BAH_rcp_mutex)
    if __BAH_rcp_treeBase != null {
        count = 0
//         noCheck(printf("[RCP] Heap is not totally freed\n"+4))
        RCP_printTree(__BAH_rcp_treeBase, &count)
        noCheck(printf("Total: %ld\n"+4, count))
    }
}

//Shuts down the program.
cleanShutDown() {
    RCP_shutdown()
    exit(1)
}

RCP_get(pt ptr) __BAH_rcp_tree* {
    p = <__BAH_rcp_tree*>(<int>pt - sizeof(__BAH_rcp_tree))
    e = __BAH_rcp_treeBase
    for e != null && e != p {
        if <int>p > <int>e {
            e = e.more
        } else if <int>p < <int>e {
            e = e.less
        }
    }
    return e
}

//Adds p to the tree, it guarentess that p.less and p.more are imutable,
// allowing this function to add entire branches.
RCP_add(p __BAH_rcp_tree*) {
    if __BAH_rcp_treeBase == null {
//         // noCheck(printf("[RCP] Setting base %p\n"+4, p))
        __BAH_rcp_treeBase = p

        return
    }
    e = __BAH_rcp_treeBase
    for e != null {
        if <int>p > <int>e {
            if e.more == null {
                e.more = p
                break
            }
            e = e.more
        } else if <int>p < <int>e {
            if e.less == null {
                e.less = p
                break
            }
            e = e.less
        }
    }
//     // noCheck(printf("[RCP] Setting parent (%p) %p\n"+4, p, e))
    p.parent = e
}

RCP_remove(p __BAH_rcp_tree*, needFree bool) {
    // RCP_flushOperBuffer()
    if p.parent == null {
        if __BAH_rcp_treeBase != p {
//             noCheck(printf("[RCP] parent null %p != %p\n"+4, p, __BAH_rcp_treeBase))
            panic("RCP: tree corrupted, freeing will leave dead pointer behind.")
        }
        __BAH_rcp_treeBase = null
    } else {
        if <int>p > <int>p.parent {
            p.parent.more = null
        } else if <int>p < <int>p.parent {
            p.parent.less = null
        }
    }

    if p.less != null {
        RCP_add(p.less)
    }

    if p.more != null {
        RCP_add(p.more)
    }

//     noCheck(printf("[RCP] freeing %p\n"+4, p))
    if needFree {
        free(p)
    }
}

RCP_register(p ptr, s int) ptr {
    pthread_mutex_lock(&__BAH_rcp_mutex)
    // RCP_flushOperBuffer()
    retP = <int>p + sizeof(__BAH_rcp_tree)
    if retP < __BAH_rcp_min || __BAH_rcp_min == 0 {
        __BAH_rcp_min = retP
    }
    if retP > __BAH_rcp_max || __BAH_rcp_max == 0 {
        __BAH_rcp_max = retP
    }
    tp __BAH_rcp_tree* = p
    tp.count = 1
    tp.size = s
    RCP_add(tp)
    pthread_mutex_unlock(&__BAH_rcp_mutex)
    return <ptr>(<int>p + sizeof(__BAH_rcp_tree))
}

RCP_decrScan(p ptr, s int32) {
    curr = <ptr*>p
    end = <ptr*>(<int>p + s)
    for <int>curr < <int>end {
        b = *curr
        if b != null && b <= __BAH_rcp_max && b >= __BAH_rcp_min{
            RCP_decrImmediate(b, sizeof(ptr), true)
        }
        curr = noCheck(curr + 1)
    }
}

RCP_decrImmediate(p ptr, s int32, strict bool) {
    if p == null {
        return
    }

    pt = RCP_get(p)
    if pt == null {
//         noCheck(printf("[RCP] null: %p\n"+4, p))
        if (p < __BAH_rcp_min || p > __BAH_rcp_max) {
            RCP_decrScan(p, s)
        }
        return
    }
    pt.count--
    
    if pt.count == 0 {
        RCP_decrScan(p, pt.size)
        RCP_remove(pt, true)
    }
}

RCP_incrScan(p ptr, s int32) {
    curr = <ptr*>p
    end = <ptr*>(<int>p + s)
    for <int>curr < <int>end {
        b = *curr
        if b != null && b <= __BAH_rcp_max && b >= __BAH_rcp_min{
            RCP_incrImmediate(b, sizeof(ptr), true)
        }
        curr = noCheck(curr + 1)
    }
}

RCP_incrImmediate(p ptr, s int32, strict bool) {
    if p == null {
        return
    }

    pt = RCP_get(p)
    if pt == null {
        if (p < __BAH_rcp_min || p > __BAH_rcp_max) {
            RCP_incrScan(p, s)
        }
        return
    }
    pt.count++
//     noCheck(printf("[RCP] incr: %p (%d)\n"+4, p, pt->count))
}

// RCP_flushOperBuffer


RCP_decr(p ptr, s int32) {
    pthread_mutex_lock(&__BAH_rcp_mutex)
    RCP_decrImmediate(p, s, false)
    pthread_mutex_unlock(&__BAH_rcp_mutex)
}

RCP_incr(p ptr, s int32) {
    pthread_mutex_lock(&__BAH_rcp_mutex)
    RCP_incrImmediate(p, s, false)
    pthread_mutex_unlock(&__BAH_rcp_mutex)
}

//Used for allocating memory (malloc in c). You must specify the size of the block to allocate.
//Will return a pointer to the allocated block. The memory is garbage collected.
//**The given memory is initiated with zeros.**
//The allocated memory cannot be shared by multiple processes. Use the sharedMemory() function instead.
memoryAlloc(s uint) ptr {
    p = malloc(s + sizeof(__BAH_rcp_tree)+1)
//     noCheck(printf("[RCP] Allocating: %p (%ld bytes)\n"+4, p, s))
    memset(p, null, s + sizeof(__BAH_rcp_tree))
    return RCP_register(p, s)
}

//Used for allocating memory for a cpstring.
//The content of the memory block should not contain any pointer.
//It will not be checked for memory collection.
memoryAllocSTR(s uint) cpstring {
    p = malloc(s+cpstringLenSize+sizeof(__BAH_rcp_tree)+1)
//     noCheck(printf("[RCP] Allocating STR: %p (%ld bytes)\n"+4, p, s))
    memset(p, null, s + cpstringLenSize + sizeof(__BAH_rcp_tree))
    r = <cpstring>RCP_register(p, s + cpstringLenSize)
    ln uint32* = r
    *ln = s-1
    noCheck(r[s-1] = 0)
    return <cpstring>r
}

//Will realloc memory to a specified pointer.
//The pointer returned will be different from p.
memoryRealloc(p ptr, s uint) ptr {
//     noCheck(printf("[RCP] Re-allocating: %ld bytes\n"+4, s))
    if p == null {
        return memoryAlloc(s)
    }
    tp = <__BAH_rcp_tree*>(<int>p - sizeof(__BAH_rcp_tree))
    os = tp.size

    n = memoryAlloc(s)
    if s > os {
        memcpy(n, p, os)
        memset(<ptr>(<int>n + os), null, s - os)
    } else {
        memcpy(n, p, s)
    }
    memset(p, null, os)

    return n

    // RCP_remove(tp, false)
    // tp = realloc(tp, s + sizeof(__BAH_rcp_tree))
    // memset(<ptr>(<int>tp + sizeof(__BAH_rcp_tree) + os), null, s - os)
    // tp.more = null
    // tp.less = null
    // tp.parent = null
    // return RCP_register(tp, s)
}


//Clear will remove the content of an array.
clear(a ptr) {
    arr Bah_Array_Type* = a
    arr.length = 0
}

//Used for setting an end of line registerer to an allocated pointer.
memoryOnEnd(obj ptr, fn ptr) {
}

//The Bah version of memcpy.
//This will copy l bytes from the source to the end.
//A faster version is available with -optimize.
//This is called when calling memcpy().
__BAH_memcpy(dest cpstring, source cpstring, l int) {
    lm = l % sizeof(int)
    if lm != 0 {
        for lm != 0, lm-- {
            i = l - lm
            noCheck(dest[i] = source[i])
        }
    }
    destI int* = <ptr>(<int>dest - sizeof(int))
    sourceI int* = <ptr>(<int>source - sizeof(int))
    i=l/sizeof(int); for i != 0, i-- {
        noCheck(destI[i] = sourceI[i])
    }
}
