#include "iostream.bah"
#include "string.bah"

#include "<stddef.h>"

//The reflection of an element (a var).
//A reflection is a wrapper for informations on the data-type of the element.
//This is used for getting compile-time informations at runtime.
//**Usage: **
//Simply put reflectElement as the type of a function argument.
//The argument will then be reflected inside the function.
struct reflectElement {
    //Var infos
    size: int
    type: cpstring
    name: cpstring

    //Array infos
    isArray: bool
    arrayElem: reflectElement*

    //Struct infos
    isStruct: bool
    structLayout: []reflectElement
    offset: int

    //Actual element
    value: ptr

    //Calculates the offset pointer from an origin pointer.
    //This is used to get a pointer to the element when it
    calculateOffset(origin ptr) ptr {
        base cpstring = origin
        return noCheck(base + this.offset)
    }
}


//Internal function used for generating a reflected element.
__reflect(v ptr, s int, t cpstring, n cpstring, isArr bool, ae reflectElement*, isStruct bool, sl []reflectElement, offset int) reflectElement {
    re = reflectElement{}
    re.size = s
    re.type = t
    re.name = n
    re.isArray = isArr
    re.arrayElem = ae
    re.isStruct = isStruct
    re.structLayout = sl
    re.value = v
    re.offset = offset
    return re
}

#define reflectSymbols ptr

__dumpSymbols(syms []reflectElement) []reflectElement {
    return syms
}

//Example
// #include "iostream.bah"
// #include "reflect.bah"
// reflectedPrint(e reflectElement) {
//     if e.type == "int" {
//         ip int* = e.value
//         println(intToStr(*ip))
//     } else if e.type == "cpstring" {
//         //WARNING: if the str is the member of a struct, it will return a pointer to the cpstring.
//         sp cpstring = e.value
//         println(sp)
//     }
// }
// main(args []cpstring) int {
//     a = 54
//     b = "test"
//     reflectedPrint(a)
//     reflectedPrint(b)
//     return 0
// }
