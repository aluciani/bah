#include "<string.h>"
#include "<math.h>"
#include "<stdlib.h>"

#include "cBinds.bah"

#define! strncpy(dest cpstring, src cpstring, size int)
#define! memcpy(dest ptr, src ptr, size int)
#define! sscanf(str cpstring, format cpstring, dest ptr)
#define! strtol(str cpstring, endptr ptr, base int) int
#define! strtod(str cpstring, endptr int) float
#define! memset(str ptr, w int, s int)
#define! atol(a cpstring) int

//Used for concatenating two known length cpstrings.
strCatOffset(dest cpstring, destLen int, src cpstring, srcLen int) {
    memcpy(noCheck(dest+destLen+cpstringLenSize), src, srcLen)
}

//Used for converting a char into a cpstring of length 1.
charToString(c char) cpstring {
    s cpstring = memoryAllocSTR(2)
    ln uint32* = s
    *ln = 1
    strncpy(s,<ptr>&c, 1)
    return s
}

//Used to know if a char is upper-cased, will return 1 if true.
isUpper(c char) bool {
    return c >= 'A' && c <= 'Z'
}

//Used to know if a char is lower-cased, will return 1 if true.
isLower(c char) bool {
    return c >= 'a' && c <= 'z'
}

//Used to know if a char is a letter, will return 1 if true.
isLetter(s char) bool {
    return isLower(s) || isUpper(s)
}

//Used to know if a char is a number, will return 1 if true.
isNumber(c char) bool {
    return c >= '0' && c <= '9'
}

//Used to know if a char is alphanumeric, will return 1 if true.
//Alphanumeric means letter or number.
isAlphaNumeric(s char) bool {
    return isLetter(s) || isNumber(s)
}

//Used to know if a char is a space / new line character, will return 1 if true.
isSpace(c char) bool {
    return c == <char>32 || c == <char>9 || c == <char>10 || c == <char>11 || c == <char>13
}

//Replace the substring 'what' by the string 'by' inside the string 's'.
strReplace(s cpstring, what cpstring, by cpstring) cpstring {
    l = len(s)
    wl = len(what)
    bl = len(by)
    ind = 0
    r = strBuilder{}
    i=0; for i < l, i++ {
        c = s[i]
        if c == what[ind] {
            ind++
            if ind == wl {
                ind = 0
                j=0; for j < bl, j++ {
                    r.append(by[j])
                }
            }
        } else {
            j=0; for j < ind, j++ {
                r.append(s[i - ind + j])
            }
            ind = 0
            r.append(c)
        }
    }
    j=0; for j < ind, j++ {
        r.append(s[i - ind + j])
    }
    return r.str()
}

//A string wrapper to make string manipulation easier.
struct string {
    //The content of the string as a cpstring.
    content: cpstring
    //Weither the string is mutable. This should not be changed.
    editable: bool
    //The length of the string.
    length: int

    //Sets the string value to the specified cpstring.
    set(s cpstring) {
        this.length = len(s)
        this.editable = false
        this.content = s
    }

    //Used internally to make a string mutable without causing conflict.
    //This is because setting the content of a string will not copy the new cpstring to memory
    //until it is changed.
    makeEditable() {
        this.editable = true
        old = this.content
        this.content = <cpstring>memoryAllocSTR(this.length+1)
        strncpy(this.content, old, this.length)
    }

    //Appends the specified cpstring to the string.
    append(s cpstring) {
        if this.editable == false {
            this.makeEditable()
        }
        sl = len(s)
        nc = memoryAllocSTR(sl + this.length + 1)
        memcpy(nc, this.content, this.length)
        strCatOffset(nc, this.length, s, sl)
        this.content = nc
        this.length += sl
    }
    
    //Prepends the specified cpstring to the string.
    prepend(s cpstring) {
        this.editable = true
        sl = len(s)
        nl = this.length + sl
        tmpS = this.content
        nc = memoryAllocSTR(nl + 1)
        if nc == null {
            panic("Error appending to string, possibly due to memory shortage.")
        }
        this.content = nc
        strncpy(this.content, s, sl)
        strCatOffset(this.content, sl, tmpS, this.length)
        this.length = nl
    }

    //Returns the char at the specified position of the string.
    charAt(i int) char {
        return this.content[i]
    }

    //Used to know if the content of the string is the same as the specified cpstring, returns 1 if true.
    compare(s cpstring) int {
        return <int>noCheck(strcmp(this->content, s)) == 0
    }

    //Used for getting the content of the string as a cpstring.
    str() cpstring {
        return this.content
    }

    //Used to replace a substring by another.
    replace(nd cpstring, rl cpstring) {
        this.set(strReplace(this.content, nd, rl))
    }

    //Counts the number of times a specific chars apears in the string.
    countChar(need char) int {
        c = 0
        i=0; for i < this.length, i++ {
            if this.charAt(i) == need {
                c++
            }
        }
        return c
    }

    //Used to count the number of substring(s).
    count(need cpstring) int {
        if len(need) == 1 {
            return this.countChar(need[0])
        }
        i = 0
        count = 0
        needle = string{}
        needle.set(need)
        countIndex = 0
        for i < this.length {
            c = this.charAt(i)
            sc = needle.charAt(countIndex)
            if c == sc {
                countIndex = countIndex + 1
            } else {
                countIndex = 0
            }
            if countIndex == needle.length {
                count = count + 1
                countIndex = 0
            }
            i = i + 1
        }
        return count
    }

    //Used to know if the string as a specified prefix, returns 1 if true.
    hasPrefix(need cpstring) int {
        i = 0
        nl = len(need)
        if this.length < nl {
            return 0
        }
        for i < nl {
            c = this.charAt(i)
            sc = cpstringCharAt(need, i)
            if c != sc {
                return 0
            }
            i = i + 1
        }
        return 1
    }

    //Used to know if the string as a specified suffix, returns 1 if true.
    hasSuffix(need cpstring) int {
        nl = len(need)
        if this.length < nl {
            return 0
        }
        i =  this.length - nl
        needleIndex = 0
        for i < this.length {
            c = this.charAt(i)
            sc = cpstringCharAt(need, needleIndex)
            if c != sc {
                return 0
            }
            needleIndex = needleIndex + 1
            i = i + 1
        }
        
        return 1

    }

    //Used for triming spaces at the beginning of the string.
    trim() {
        if this.length == 0 {
            return
        }
        fc = this.charAt(0)
        if isSpace(fc) == false {
            return
        }
        i=0;for i < this.length, i++ {
            if isSpace(this.charAt(i)) == false {
                break
            }
        }
        if i > 0 {
            this.length = this.length - i
            tmpS cpstring = memoryAllocSTR(this.length+1)
            memcpy(tmpS, noCheck(this->content+i), this.length+1)
            this.content = tmpS
            this.editable = true
        }
    }

    //Used to trim a specified number of charcaters from the beginning of the string.
    trimLeft(s int) {
        if s > this.length {
            return
        }
        this.content = this.content[s:this.length]
        this.editable = true
        this.length = this.length - s
    }

    //Used to trim a specified number of charcaters from the end of the string.
    trimRight(s int) {
        if s > this.length {
            return
        }
        this.content = this.content[:this.length-s]
        this.editable = true
        this.length = this.length - s
    }

    //Used for concatenating antother string.
    //This is like .append() except this is used by the compiler for string + string.
    add(s2 string) string {
        r = string{}
        r.length = this.length + s2.length
        r.content = memoryAllocSTR(r.length + 1)
        strncpy(r.content, this.content, this.length)
        strCatOffset(r.content, this.length, s2.content, s2.length)
        return r
    }

    //Used for editting the content of the string as an array.
    asArr() []char {
        if this.editable == false {
            this.makeEditable()
        }
        arr = []char
        noCheck(arr->data = this->content+cpstringLenSize)
        noCheck(arr->length = this->length)
        noCheck(arr->realLength = this->length)
        return arr
    }

    resetLength() {
        if this.editable == false || <ptr>this.content == null {
            return
        }
        ln uint32* = this.content
        *ln = this.length
    }

}

//Used to make a string wrapper from a specified cpstring.
string(s cpstring) string {
    a = string{}
    a.set(s)
    return a
}

//Converts an int into a cpstring.
intToStr(i int) cpstring {
    if i == 0 {
        return "0"
    }

    s = buffer 66
    ind = -1
    
    subZero = i < 0

    if subZero == true {
        i = 0-i
    }

    for i != 0, i = i / 10 {
        conv = i % 10
        conv = conv + 48
        s[ind+1] = <char>conv
        ind++
    }

    if subZero == true {
        s[ind+1] = '-'
        ind++
    }
    ls = ind+1
    i=0; for i < ls/2, i++ {
        ii = ls-i-1
        osi = s[i]
        s[i] = s[ii]
        s[ii] = osi
    }

    s[ind+1] = <char>0

    return buffToStr(<char*>s)
}

//Used to convert an integer into a string.
//*It returns a string, not a cpstring*
intToString(i int) string {
    r = string(intToStr(i))
    return r
}

//Converts a float to a cpstring.
floatToStr(f float) cpstring {
    buff = buffer 50
    sprintf(<ptr>buff, "%lf", f)
    return buffToStr(<char*>buff)
}

//Used for converting a string to an int.
strToInt(s cpstring) int {
    l int = len(s)-1
    offset = 1
    r = 0
    end = 0
    if s[0] == '-' {
        end = 1
    }
    for l >= end, l-- {
        if s[l] < '0' || s[l] > '9' {
            continue
        }
        r += (<int>s[l] - 48) * offset
        offset *= 10
    }
    if end == 1 {
        r = 0-r
    }
    return r
} 

//Used for converting a string to a float
strToFloat(s cpstring) float {
    return strtod(s, null)
}


//Used to convert a string into an integer.
//*It takes a string, not a cpstring*
stringToInt(s string) int {
    i int = atol(s.content)
    return i
}

//Used for splitting a string into multiple substrings delimited by the specified delimiter.
splitString(s string, sep cpstring) []string {
    sepInd = 0
    start = 0
    r = []string

    i=0; for i < s.length, i++ {
        c = s.charAt(i)
        if c == sep[sepInd] {
            sepInd++
            if sepInd == len(sep) {
                sepInd = 0
                end = i-len(sep)+1
                if start != end {
                    r[len(r)] = string(s.content[start:end])
                }
                start = i+1
            }
        } else {
            sepInd = 0
        }
    }

    end = i-len(sep)+1
    if start < end {
        r[len(r)] = string(s.content[start:end])
    }

    return r
}

//Used for joinning an array of strings with a specified separator into a string.
joinString(a []string, sep cpstring) string {
    i = 0
    s = string("")
    max = len(a) - 1
    for i < len(a) {
        e = a[i]
        if e.length == 0 {
            i = i + 1
            continue
        }
        tmpS = string(e.str())
        if i != max {
            tmpS.append(sep)
        }
        s.append(tmpS.str())
        i = i + 1
    }
    return s
}

//Used to get the content of a string before a certain delimiter.
splitStringBefore(s string, sp cpstring) cpstring {
    sep = string(sp)
    if sep.length >= s.length {
        return ""
    }
    sepIndex = 0
    foundIndex = 0
    i=0;for i < s.length {
        c = s.charAt(i)
        sc = sep.charAt(sepIndex)
        if c == sc {
            if sepIndex == 0 {
                foundIndex = i - 1
            }
            sepIndex = sepIndex + 1
            if sepIndex == sep.length {
                max = s.length - foundIndex - 1
                s.trimRight(max)
                return s.str()
            }
        } else {
            foundIndex = 0
            sepIndex = 0
        }

        i = i + 1
    }

    return ""

}

//Used to lower-case a string.
toLower(s string) string {
    ns = []char
    i=0;for i < s.length {
        c = s.charAt(i)
        if isUpper(c) {
            c = c + <char>32
        }
        ns[len(ns)] = c
        i = i + 1
    }
    return string(arrToStr(ns))
}

//Use string(s).hasPrefix(prefix) instead.
//This function has known bugs.
strHasPrefix(s cpstring, need cpstring) bool {
    i = 0
    nl = len(need)
    sl = len(s)
    if sl < nl {
        return false
    }
    for i < nl { 
        if cpstringCharAt(s, i) != cpstringCharAt(need, i) {
            return false
        }
        i = i + 1
    }
    return true
}

//Use string(s).hasSuffix(suffix) instead.
//This function has known bugs.
strHasSuffix(s cpstring, need cpstring) bool {
    sl = len(s)
    nl = len(need)
    if nl > sl {
        return false
    }
    i=sl-nl; for i < sl {
        if cpstringCharAt(s, i) != cpstringCharAt(need, i) {
            return false
        }
        i = i + 1
    }
    return true
}

//Used for trimming a cpstring.
//This will remove all space chars at the begining of the cpstring. 
strTrim(s cpstring*) {
    l = len(*s)
    i=0; for i < l {
        c = cpstringCharAt(*s, i)
        if isSpace(c) == false {
            break
        }
        i = i + 1
    }
    *s = noCheck(*s + i)

}

//This is used to count the number of substrings inside a cpstring.
strCount(src cpstring, needle cpstring) int {
    i = 0
    count = 0
    countIndex = 0
    sl = len(src)
    nl = len(needle)
    for i < sl {
        c = cpstringCharAt(src, i)
        sc = cpstringCharAt(needle, countIndex)
        if c == sc {
            countIndex = countIndex + 1
        } else {
            countIndex = 0
        }
        if countIndex == nl {
            count = count + 1
            countIndex = 0
        }
        i = i + 1
    }
    return count
}

//Example
//#include "iostream.bah"
//#include "string.bah"
//
// main() {
//     a = string("I code in ")
//     a.append("Bah")
//
//     println(a)
//
//     age = 16
//     b = intToString(age)
//     b.prepend("I'm ")
//     b.append(" years old")
//     println(b)
// }
