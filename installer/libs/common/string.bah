#include "<string.h>"
#include "<math.h>"

#include "memory.bah"

#include "cBinds.bah"

#define! strncpy(dest cpstring, src cpstring, size int)
#define! memcpy(dest ptr, src ptr, size int)
#define! sscanf(str cpstring, format cpstring, dest ptr)
#define! strtol(str cpstring, endptr ptr, base int) int
#define! strtod(str cpstring, endptr int) float
#define! memset(str ptr, w int, s int)
#define! atol(a cpstring) int

//Used for concatenating two known length cpstrings.
strCatOffset(dest cpstring, destLen int, src cpstring, srcLen int) {
    memcpy(noCheck(dest+destLen), src, srcLen)
}


//Used for getting a character by its index inside a cpstring.
cpstringCharAt(s cpstring, i int) char {
    c = <char>0
    noCheck(c = s[i])
    return c
}

//Used for converting a char into a cpstring of length 1.
charToString(c char) cpstring {
    s cpstring = memoryAlloc(2)
    strncpy(s,<cpstring>&c, 1)
    return s
}

//Used to know if a char is upper-cased, will return 1 if true.
isUpper(c char) int {
    if c > <char>64 {
        if c < <char>91 {
            return 1
        }
    }
    return 0
}

//Used to know if a char is lower-cased, will return 1 if true.
isLower(c char) int {
    if c > <char>96 {
        if c < <char>123 {
            return 1
        }
    }
    return 0
}

//Used to know if a char is a letter, will return 1 if true.
isLetter(s char) int {
    if isUpper(s) {
        return 1
    }
    if isLower(s) {
        return 1
    }
    return 0
}

//Used to know if a char is a number, will return 1 if true.
isNumber(c char) int {
    if c > <char>47 {
        if c < <char>58 {
            return 1
        }
    }
    return 0
}

//Used to know if a char is alphanumeric, will return 1 if true.
//Alphanumeric means letter or number.
isAlphaNumeric(s char) int {
    if isLetter(s) {
        return 1
    }
    if isNumber(s) {
        return 1
    }
    return 0
}

//Used to know if a char is a space / new line character, will return 1 if true.
isSpace(c char) int {
    if c == <char>32 {
        return 1
    }
    if c == <char>9 {
        return 1
    }
    if c == <char>10 {
        return 1
    }
    if c == <char>11 {
        return 1
    }
    if c == <char>13 {
        return 1
    }

    return 0
}

#define arrAsStr(arr []char) cpstring

//A string wrapper to make string manipulation easier.
struct string {
    content: cpstring
    length: int

    //Sets the string value to the specified cpstring.
    set(s cpstring) {
        this.length = strlen(s)
        this.content = <cpstring>memoryAlloc(this.length+1)
        strcpy(this.content, s)
    }

    //Appends the specified cpstring to the string.
    append(s cpstring) {
        sl = strlen(s)
        nl = sl + this.length
        this.content = memoryRealloc(this.content, nl + 1)
        strCatOffset(this.content, this.length, s, sl)
        this.length = nl
    }
    
    //Prepends the specified cpstring to the string.
    prepend(s cpstring) {
        sl = strlen(s)
        nl = this.length + sl
        tmpS = this.content
        this.content = memoryAlloc(nl + 1)
        strncpy(this.content, s, sl)
        strCatOffset(this.content, sl, tmpS, this.length)
        destroy(tmpS)
        this.length = nl
    }

    //Returns the char at the specified position of the string.
    charAt(i int) char {
        c = <char>0
        if i < this.length {
            noCheck(c = this->content[i])
            return c
        }
        return c
    }

    //Used to know if the content of the string is the same as the specified cpstring, returns 1 if true.
    compare(s cpstring) int {
        r int = strcmp(this.content, s)
        if r == 0 {
            return 1
        }
        return 0
    }

    //Used for getting the content of the string as a cpstring.
    str() cpstring {
        r = this.content
        return r
    }

    //Used to replace a substring by another.
    replace(nd cpstring, rl cpstring) {
        needle = string{}
        needle.set(nd)
        repl = string{}
        repl.set(rl)
        i = 0
        si = 0
        
        replcBuffSart = 0
        replcBuffLength = 0

        buff = []char
        for i < this.length {
            
            c = this.charAt(i)
            rc = needle.charAt(si)
            
            if c == rc {
                si = si + 1
                if replcBuffLength == 0 {
                    replcBuffSart = i
                }
                replcBuffLength = replcBuffLength + 1
            } else {
                if replcBuffLength > 0 {
                    si = 0
                    j=0; for j < replcBuffLength {
                        buff[len(buff)] = this.charAt(j + replcBuffSart)
                        j = j + 1
                    }
                    replcBuffLength = 0
                }
                buff[len(buff)] = c
            }

            if si == needle.length {
                replcBuffLength = 0
                ii = 0; for ii < repl.length {
                    a = ii
                    buff[len(buff)] = repl.charAt(ii)
                    ii = ii + 1
                }
                si = 0
            }

            i = i + 1
        }
        r = arrAsStr(buff)
        if replcBuffLength > 0 {
            replbuffStr = []char
            allocateArray(replbuffStr, replcBuffLength+1)
            j=0; for j < replcBuffLength {
                replbuffStr[j] = this.charAt(j + replcBuffSart)
                j = j + 1
            }
            r = r + arrAsStr(replbuffStr)
        }
        if <ptr>r != null {
            this.set(r)
        }
    }

    //Used to count the number of substring(s).
    count(need cpstring) int {
        i = 0
        count = 0
        needle = string{}
        needle.set(need)
        countIndex = 0
        for i < this.length {
            c = this.charAt(i)
            sc = needle.charAt(countIndex)
            if c == sc {
                countIndex = countIndex + 1
            } else {
                countIndex = 0
            }
            if countIndex == needle.length {
                count = count + 1
                countIndex = 0
            }
            i = i + 1
        }
        return count
    }

    //Used to know if the string as a specified prefix, returns 1 if true.
    hasPrefix(need cpstring) int {
        i = 0
        nl = strlen(need)
        if this.length < nl {
            return 0
        }
        for i < nl {
            c = this.charAt(i)
            sc = cpstringCharAt(need, i)
            if c != sc {
                return 0
            }
            i = i + 1
        }
        return 1
    }

    //Used to know if the string as a specified suffix, returns 1 if true.
    hasSuffix(need cpstring) int {
        nl = strlen(need)
        if this.length < nl {
            return 0
        }
        i =  this.length - nl
        needleIndex = 0
        for i < this.length {
            c = this.charAt(i)
            sc = cpstringCharAt(need, needleIndex)
            if c != sc {
                return 0
            }
            needleIndex = needleIndex + 1
            i = i + 1
        }
        
        return 1

    }

    //Used for trimming spaces at the beginning of the string.
    trim() {
        if this.length == 0 {
            return
        }
        fc = this.charAt(0)
        if isSpace(fc) == 0 {
            return
        }
        i = 0
        for i < this.length {
            c = this.charAt(i)
            if isSpace(c) == 0 {
                break
            }
                i = i + 1
        }
        if i > 0 {
            this.length = this.length - i
            tmpS cpstring = memoryAlloc(this.length+1)
            memcpy(tmpS, noCheck(this.content+i), this.length+1)
            this.content = tmpS
        }
    }

    //Used to trim a specified number of charcaters from the beginning of the string.
    trimLeft(s int) {
        nSize = this.length - s
        tmpS = memoryAlloc(nSize)
        memcpy(tmpS, noCheck(this.content+s), nSize)
        this.content = tmpS
        this.length = nSize
    }

    //Used to trim a specified number of charcaters from the end of the string.
    trimRight(s int) {
        nSize = this.length - s
        tmpS = memoryAlloc(nSize)
        memcpy(tmpS, this.content, nSize)
        this.content = tmpS
        this.length = nSize
    }

    add(s2 string) string {
        r = string{}
        r.length = this.length + s2.length
        r.content = memoryAlloc(r.length + 1)
        strncpy(r.content, this.content, this.length)
        strCatOffset(r.content, this.length, s2.content, s2.length)
        return r
    }

}

//Used to make a string wrapper from a specified cpstring.
string(s cpstring) string {
    a = string{}
    a.set(s)
    return a
}

//Used to convert an array of characters to a cpstring.
arrToStr(arr []char) cpstring {
    strLen = len(arr)
    str cpstring = memoryAlloc(strLen+1)
    noCheck(memcpy(str, arr->data, strLen))
    return str
}

//Used to convert a cpstring into an array of characters.
strToArr(str cpstring) []char {
    strLen = strlen(str)
    arr = []char
    noCheck(arr->data = memoryAlloc(strLen+1))
    noCheck(memcpy(arr->data, str, strLen))
    noCheck(arr->length = strLen)
    
    return arr
}

//Used to get a pointer to an array data as a cpstring.
//Unlike arrToStr, this does not copy the content of the array to a cpstring.
//This is faster but changing the content of the returnend cpstring will change the content of the array.
//You can see this operation as linkning the same data through two different interfaces, the only difference between these two interfaces are their type.
arrAsStr(arr []char) cpstring {
    return noCheck(arr->data)
}

//Used to get a cpstring as an array of chars.
//This is faster than strToArr() but changing the content of the array will change the content of the cpstring.
//This could lead to memory corruption if the cpstring is not heap allocated.
//Make sure that the array is null terminated if editting it.
strAsArr(str cpstring) []char {
    l = strlen(str)
    arr = []char
    noCheck(arr->length = l)
    noCheck(arr->data = str)
    return arr
}


//Used to convert an integer into a string.
//*It returns a string, not a cpstring*
intToString(i int) string {
    buff cpstring = memoryAlloc(65)
    ptri = <ptr>i
    sprintf(buff, "%d", ptri)
    r = string(buff)
    return r
}

//Converts an int into a cpstring.
//This is faster than intToString.
intToStr(i int) cpstring {
    buff cpstring = memoryAlloc(50)
    sprintf(buff, "%ld", i)
    return buff
}

//Converts a float to a cpstring.
floatToStr(f float) cpstring {
    buff cpstring = memoryAlloc(50)
    sprintf(buff, "%lf", f)
    return buff
}

//Used for converting a string to an int.
strToInt(s cpstring) int {
    return atol(s)
}

//Used for converting a string to a float
strToFloat(s cpstring) float {
    return strtod(s, null)
}


//Used to convert a string into an integer.
//*It takes a string, not a cpstring*
stringToInt(s string) int {
    i int = atol(s.content)
    return i
}

//Used for splitting a string into multiple substrings delimited by the specified delimiter.
splitString(s string, sp cpstring) []string {
    sep = string(sp)
    res = []string
    sepBuffer = string("")
    sepIndex = 0
    i = 0
    replcBuff = string("")
    tmpString = []char


    for i < s.length {
        c = s.charAt(i)
        sepc = sep.charAt(sepIndex)
        
            if c == sepc {
                sepIndex = sepIndex + 1
                replcBuff.append(charToString(c))
            } else {
                if sepIndex > 0 {
                    sepIndex = 0
                    replcBuff.append(charToString(c))
                    ii=0;for ii < replcBuff.length {
                    tmpString[len(tmpString)] = replcBuff.charAt(ii)
                    ii = ii + 1 
                    }
                    replcBuff.set("")
                } else {
                    tmpString[len(tmpString)] = c
                }
            }
            if sepIndex == sep.length {
                replcBuff.set("")
                elem = new string
                elem.set(arrToStr(tmpString))
                lenRes = len(res)
                res[lenRes] = *elem
                clear(tmpString)
                sepIndex = 0
            }

    
        i = i + 1
    }

    if replcBuff.length > 0 {
        ii=0;for ii < replcBuff.length {
            tmpString[len(tmpString)] = replcBuff.charAt(ii)
            ii = ii + 1 
        }
    }


    if len(tmpString) > 0 {
        elem = new string
        elem.set(arrToStr(tmpString))
        lenRes = len(res)
        res[lenRes] = *elem
    }

    return res
}

//Used for joinning an array of strings with a specified separator into a string.
joinString(a []string, sep cpstring) string {
    i = 0
    s = string("")
    max = len(a) - 1
    for i < len(a) {
        e = a[i]
        if e.length == 0 {
            i = i + 1
            continue
        }
        tmpS = string(e.str())
        if i != max {
            tmpS.append(sep)
        }
        s.append(tmpS.str())
        i = i + 1
    }
    return s
}

//Used to get the content of a string before a certain delimiter.
splitStringBefore(s string, sp cpstring) cpstring {
    sep = string(sp)
    if sep.length >= s.length {
        return ""
    }
    sepIndex = 0
    foundIndex = 0
    i=0;for i < s.length {
        c = s.charAt(i)
        sc = sep.charAt(sepIndex)
        if c == sc {
            if sepIndex == 0 {
                foundIndex = i - 1
            }
            sepIndex = sepIndex + 1
            if sepIndex == sep.length {
                max = s.length - foundIndex - 1
                s.trimRight(max)
                return s.str()
            }
        } else {
            foundIndex = 0
            sepIndex = 0
        }

        i = i + 1
    }

    return ""

}

//Used to lower-case a string.
toLower(s string) string {
    ns = []char
    i=0;for i < s.length {
        c = s.charAt(i)
        if isUpper(c) {
            c = c + <char>32
        }
        ns[len(ns)] = c
        i = i + 1
    }
    return string(arrToStr(ns))
}

strHasPrefix(s cpstring, need cpstring) bool {
    i = 0
    nl = strlen(need)
    sl = strlen(s)
    if sl < nl {
        return false
    }
    for i < nl { 
        if cpstringCharAt(s, i) != cpstringCharAt(need, i) {
            return false
        }
        i = i + 1
    }
    return true
}

strHasSuffix(s cpstring, need cpstring) bool {
    sl = strlen(s)
    nl = strlen(need)
    if nl > sl {
        return false
    }
    i=sl-nl; for i < sl {
        if cpstringCharAt(s, i) != cpstringCharAt(need, i) {
            return false
        }
        i = i + 1
    }
    return true
}

strTrimLeft(s cpstring*, i int) {
    *s = noCheck(*s + i)
}

strTrimRight(s cpstring*, i int) {
    ls = strlen(*s)
    ns cpstring = memoryAlloc(ls - i)
    memcpy(ns, *s, ls - i)
    *s = ns
}

strTrim(s cpstring*) {
    l = strlen(*s)
    i=0; for i < l {
        c = cpstringCharAt(*s, i)
        if isSpace(c) == 0 {
            break
        }
        i = i + 1
    }
    *s = noCheck(*s + i)

}

strCount(src cpstring, needle cpstring) int {
    i = 0
    count = 0
    countIndex = 0
    sl = strlen(src)
    nl = strlen(needle)
    for i < sl {
        c = cpstringCharAt(src, i)
        sc = cpstringCharAt(needle, countIndex)
        if c == sc {
            countIndex = countIndex + 1
        } else {
            countIndex = 0
        }
        if countIndex == nl {
            count = count + 1
            countIndex = 0
        }
        i = i + 1
    }
    return count
}

//Example
//#include "iostream.bah"
//#include "string.bah"
//
// main() {
//     a = string("I code in ")
//     a.append("Bah")
//
//     println(a)
//
//     age = 16
//     b = intToString(age)
//     b.prepend("I'm ")
//     b.append(" years old")
//     println(b)
// }
