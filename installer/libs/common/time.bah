#include "string.bah"
#include "<time.h>"

#darwin {
    #include "<sys/time.h>"
    #include "<mach/clock.h>"
}

//A milisecond in nanoseconds.
const TIME_MS  = 1000000
//A second in nanoseconds.
const TIME_S   = 1000000000
//A minute in nanoseconds.
const TIME_MIN = 60000000000

//This is a wrapper that makes time manipulations easier.
//By default, its .timestamp field is set to the current time.
struct time {
    timestamp: int

    //To set the timestamp to the current time.
    now() {
        this.timestamp = time(0)
    }
    
    //To format the timestamp using the specified format.
    //The format options can be found [here](https://koor.fr/C/ctime/strftime.wp).
    format(a cpstring) cpstring {
        
        lt int = localtime(&this.timestamp)

        buff = buffer 1024
        
        l = strftime(<ptr>buff, 1024, a, lt)
        buff[l] = null
        return buffToStr(<char*>buff)
    } 

    //To get the number of seconds since the timestamp.
    since() int {
        nt = time(0)
        r = nt - this.timestamp
        return r
    }
}

struct! timespec {
    tv_sec: int
    tv_nsec: int
}

#linux {
    #define! timespec_get(ts timespec*, mode int)
}

#darwin {
    #define! clock_serv_t ptr
    #define! mach_timespec_t ptr
    #define! mach_host_self() ptr
    #define! mach_task_self() ptr
    #define! host_get_clock_service(mach ptr, type int, clock clock_serv_t*)
    #define! clock_get_time(clock clock_serv_t, mts mach_timespec_t*)
    #define! mach_port_deallocate(mach ptr, clock clock_serv_t)
}

#windows {
    #define! clock_gettime(w int, t timespec*) int
}


//Returns the current timestamp in nanoseconds.
//One nano second looks like this: 0000000000000000001.
getTimeUnix() int {
    ts = timespec{}
    #linux {
        timespec_get(&ts, noCheck(TIME_UTC))
    }
    #darwin {
        cclock clock_serv_t
        mts mach_timespec_t
        host_get_clock_service(mach_host_self(), noCheck(CALENDAR_CLOCK), &cclock)
        clock_get_time(cclock, &mts)
        mach_port_deallocate(mach_task_self(), cclock)
        mtsp = &mts
        ts.tv_sec = noCheck(mtsp->tv_sec)
        ts.tv_nsec = noCheck(mtsp->tv_nsec)
    }
    #windows {
        s = clock_gettime(null, &ts)
    }
    s = ts.tv_sec * 1000000000 + ts.tv_nsec
    return s
}


struct! tm {
    tm_sec: int
    tm_min: int
    tm_hour: int
    tm_mday: int
    tm_mon: int
    tm_year: int
    tm_wday: int
    tm_yday: int
    tm_isdst: int
}

//Example
// #include "iostream.bah"
// #include "time.bah"
// main() {
// ts = time{}
// ts.now()
// formattedTime = ts.format("hou:min:sec")
// println(formattedTime)
// }
