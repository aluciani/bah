#include "<stdlib.h>"
#include "<stdio.h>"
#include "<dirent.h>"
#include "<unistd.h>"
#include "<sys/types.h>"
#include "<sys/stat.h>"
#include "<fcntl.h>"

#include "cBinds.bah"
#include "memory.bah"
#include "string.bah"

#define! FILE ptr


//Returns the text inputted by the user inside the terminal.
//The returned cpstring will have the specified length.
stdinput(len int) cpstring {
    buff cpstring = memoryAlloc(len)
    fgets(buff, len, noCheck(stdin))
    return buff
}

#define! write(fd FILE*, t cpstring, l int)

//Prints text to the terminal.
print(s cpstring) {
    write(<ptr>1, s, strlen(s))
}

//Prints text to the terminal and adds a line return at the end.
println(s cpstring) {
    write(<ptr>1, s, strlen(s))
    write(<ptr>1, "\n", 1)
}

//Print an error to the terminal and exits the program.
panic(e cpstring) {
    if strlen(e) {
        println(e)
        exit(1)
    }
}

#define! fwrite(w ptr, s int, f int, hndl FILE*)
#define! fread(w ptr, s int, f int, hndl FILE*) int
#define! ftell(hndl FILE*) int
#define! fseek(hndl FILE*, offset int, from int)

//A wrapper that makes file manipulation easier.
//*Note: after openning a file, you will need to close it.*
//**Warning:** fileStream can be many, many times slower than fileMap.
//So it is recommended to **use fileMap as much as possible**.
struct fileStream {
    handle: FILE*

    //Checks if the current opened file is valid or not.
    isValid() int {
        if this.handle == null {
            return 0
        }
        return 1
    }

    //Opens a file by its name.
    //The differents modes can be found [here](https://koor.fr/C/cstdio/fopen.wp).
    open(path cpstring, mode cpstring) {
        this.handle = fopen(path, mode)
    }

    //Closes an opennend connection to a file.
    close() {
        if this.isValid() == 0 {
            return
        }
        fclose(this.handle)
    }

    //Returns the position of the file reader.
    getPos() int {
        if this.isValid() == 0 {
            return 0
        }
        return ftell(this.handle)
    }

    //Set the position of the file reader.
    setPos(i int) {
        if this.isValid() == 0 {
            return
        }
        fseek(this.handle, i, 0)
    }

    //Returns the size of a file in bytes.
    getSize() int {
        if this.isValid() == 0 {
            return -1
        }
        oldPos = this.getPos()
        fseek(this.handle, 0, 2)
        size int = ftell(this.handle)
        this.setPos(oldPos)
        return size
    }

    //Sets the reading cursor to the beginning of the file.
    rewind() {
        rewind(this.handle)
    }

    //Returns a char at the current reading cursor in the file and moves the reading cursor to the next char.
    getChar() char {
        c = getc(this.handle)
        return c
    }

    //Creates a file by name.
    createFile(path cpstring) {
        this.open(path, "w")
        this.close()
    }

    //Writes the opened file with the specified content.
    writeFile(content cpstring) int {
        if this.isValid() == 0 {
            return -1
        }

        fputs(content, this.handle)

        return 1
    }

    //Serialize a pointer and write it to a file.
    //a: the pointer to serialize
    //s: sizeof() the pointer's content
    writePtr(a ptr, s int) {
        fwrite(a, s, 1, this.handle)
    }

    //Read a file and unserialize its content to a pointer.
    //a: the pointer to unserialize
    //s: sizeof() the pointer's content.
    readPtr(a ptr, s int) int {
        return fread(a, s, 1, this.handle)
    }

    //Returns the content of the opened file.
    readContent() cpstring {
        if this.isValid() == 0 {
            return "invalid"
        }

        sz = this.getSize()
        r cpstring = memoryAlloc(sz + 1)
        l = fread(r, 1, sz, this.handle)
        if sz != l {
            rarr = strAsArr(r)
            rarr[l] = <char>0
        }
        return r
    }

    //Returns the file's content as an array of bytes (char).
    readBytes() []char {
        r = []char
        allocateArray(r, this.getSize())

        this.readPtr(noCheck(r->data), len(r))

        return r
    }

    //Write an array of bytes (char) to a file.
    writeBytes(d []char) {
        this.writePtr(noCheck(d->data), len(d))
    }

}

struct! stat {
    st_size: int
}
#define! open(fn cpstring, flags int, mode int) int
#define! close(fd int)
#define! fstat(fd int, fs stat*)

//A wrapper to make file direct operation, wihtout needing to write file on changes.
//**This is way faster than the fileStream** but every modification made to the returned string will be directly made to the file.
struct fileMap {
    handle: int
    size:int

    //To open a file inside the fileMap.
    //It returns the content of the file as cpstring.
    open(fileName cpstring) cpstring {
        this.handle = open(fileName, noCheck(O_RDWR), noCheck(S_IRUSR | S_IWUSR))
        sb = stat{}
        fstat(this.handle, &sb)
        this.size = sb.st_size
        file cpstring = mmap(0, sb.st_size, noCheck(PROT_READ | PROT_WRITE), noCheck(MAP_SHARED), this.handle, 0)
        return file
    }

    //Check if file is valid or not.
    isValid() int {
        if this.handle < 0 {
            return 0
        }
        return 1
    }

    //To close a file after you are done working on it.
    close() {
        close(this.handle)
    }
}

#define! DIR int

struct! dirent {
    d_name: cpstring
}

#define! opendir(path cpstring) DIR*
#define! closedir(d DIR*)
#define! readdir(d DIR*) dirent*

//Returns a list of all files found inside the specified directory.
listFiles(dir cpstring) []cpstring {
    files = []cpstring
    d = opendir(dir)
    file = readdir(d)
    for file != null {
        lf = len(files)
        if strcmp(file.d_name, ".") == 0 {
            file = readdir(d)
            continue
        }
        if strcmp(file.d_name, "..") == 0 {
            file = readdir(d)
            continue
        }
        files[lf] = file.d_name
        file = readdir(d)
    }
    closedir(d)
    return files
}

#define! access(fn cpstring, m int) int

//Checks if a file exists.
fileExists(path cpstring) int {
    is = access(path, 0)
    if is == 0 {
        return 1
    }
    return 0
}

#define! remove(fn cpstring) int

//Removes a file. 'name' should be the file name, returns true if the file was deleted.
removeFile(name cpstring) bool {
    if remove(name) == 0 {
        return true
    }
    return false
}

#define! getenv(s cpstring) cpstring

//Example
// #include "iostream.bah"
// main() {
// fs = fileStream{}
// fs.open("./myFile.txt", "r")
// fileContent = fs.readContent()
// println(fileContent)
// fs.close()
// }
