#include "<C:/Bah/libs/include/gc.h>"
#include "<windows.h>"
#include "<stdio.h>"
#include "<conio.h>"
#include "<tchar.h>"

#cLib "static" "w C:/Bah/libs/gc.a" "lpthread"

#define! GC_INIT()
#define! GC_MALLOC(s int) ptr
#define! GC_REALLOC(p ptr, s int) ptr
#define! GC_FREE(a ptr)

const SIZE_OF_INT = 8
const SIZE_OF_CHAR = 1
const SIZE_OF_INT32 = 4
const SIZE_OF_FLOAT32 = 4
const SIZE_OF_FLOAT = 8


//Will return the length of an array.
//This only works on arrays.
len(a ptr) int {
    i = 0
    noCheck(array(void*) * arr = a)
    noCheck(i = arr->length)
    return i
}

#define! memset(p ptr, v int, s int)

//Used for allocating memory (malloc in c). You must specify the size of the block to allocate.
//Will return a pointer to the allocated block. The memory is garbage collected.
//**The given memory is initiated with zeros.**
//The allocated memory cannot be shared by multiple processes. Use the sharedMemory() function instead.
memoryAlloc(s int) ptr {
    p = GC_MALLOC(s)
    
    byte int = 0
    i=0; for i < s {
        if i+8 > s {
            memset(noCheck(p+i), 0, s - i)
            break
        }
        v int* = noCheck(p+i)
        *v = byte
        i = i + 8
    }
    return p
}

//Destroy will force to free a pointer.
destroy(a ptr) {
    GC_FREE(a)
}

//Clear will remove the content of an array.
clear(a ptr) {
    noCheck(array(void*) * arr = a)
    noCheck(destroy(arr->data))
    noCheck(arr->data = memoryAlloc(sizeof(0)))
    noCheck(arr->length = 0)
}

//Append will add the array b to the array a.
//Note: doesn't work with []char.
append(a ptr, b ptr) {
    noCheck(array(void*) * arrA = a)
    noCheck(array(void*) * arrB = b)
    lenA = 0
    lenB = 0
    realSizeA = 0
    realSizeB = 0
    noCheck(lenA = len(arrA))
    noCheck(lenB = len(arrB))

    if lenB == 0 {
        return
    }

    if lenA == 0 {
        noCheck(arrA->data = arrB->data)
        noCheck(arrA->length = arrB->length)
        return
    }

    noCheck(realSizeA = lenA * arrA->elemSize)
    noCheck(realSizeB = lenB * arrB->elemSize)


    buff = memoryAlloc(realSizeA + realSizeB+32)
    noCheck(memcpy(buff, arrA->data, realSizeA))
    noCheck(memcpy(buff+lenA, arrB->data, realSizeB))
    noCheck(arrA->length = lenA + lenB)
    noCheck(arrA->data = buff)
}

copy(a ptr, b ptr) {
    noCheck(array(void*) * arrA = a)
    noCheck(array(void*) * arrB = b)
    lenB = 0
    realSizeB = 0
    noCheck(lenB = len(arrB))
    noCheck(realSizeB = lenB * arrB->elemSize)
    noCheck(arrA->data = memoryAlloc(realSizeB))
    noCheck(memcpy(arrA->data, arrB->data, realSizeB))
    noCheck(arrA->length = arrB->length)
}

//Will realloc memory to a specified pointer.
//*The data contained in the block of memory is not necessarly preserved.*
memoryRealloc(p ptr, s int) ptr {
    np = GC_REALLOC(p,s)
    return np
}

#define! CreateFileMapping(ihv ptr, sec int, rw int, mos int, bs int, fn cpstring) ptr
#define! MapViewOfFile(f ptr, sec int, mi1 int, mi2 int, bs int) ptr
#define! CloseHandle(mf ptr)

#define! printf(s cpstring)
#define! exit(code int)

const PROT_READ = 2
const PROT_READWRITE = 4

GLOBAL_MAPPED_MEMORY_FILE ptr

//Will allocate a page of shared memory and returns a pointer to it.
//The size should be an multiple of 4096. A size of 0 will set the page size to the default (4096).
//Shared memory can be shared between two processes (after the use of fork()).
sharedMemory(size int) ptr {
    if size == 0 {
        size = 4096
    }
    if GLOBAL_MAPPED_MEMORY_FILE == null {
        GLOBAL_MAPPED_MEMORY_FILE = CreateFileMapping(-1, 0, PROT_READWRITE, 0, size, "Global\\BahFileMap")
    }
    if GLOBAL_MAPPED_MEMORY_FILE == null {
        printf("sharedMemory: could not make map file.")
        exit(1)
    }
    r = MapViewOfFile(GLOBAL_MAPPED_MEMORY_FILE, noCheck(FILE_MAP_ALL_ACCESS), 0, 0, size)
    return r
}

//On windows, you will need to close the mapped file.
//*This is a windows only thing.*
closeSharedMemory() {
    CloseHandle(GLOBAL_MAPPED_MEMORY_FILE)
}

//Used for pre-allocating a number of element to an array.
//The content of the array is not initialized, it may contain garbage.
allocateArray(arr ptr, nbElems int) {
    noCheck(array(void*) * a = arr)
    noCheck(a->length = nbElems)
    noCheck(a->data = memoryAlloc(nbElems * a->elemSize))
}


//Example
// #include "string.bah"
// #include "memory.bah"
// main() {
//     a cpstring = memoryAlloc(30)
//     strcpy(a, "Hi!")
// }

#define! memcpy(det ptr, src ptr, s int)

#define ser(a ptr) []char

//Internal function used to serialize a pointer.
__serialize(a ptr, s int) []char {
    r cpstring = memoryAlloc(s + 9)
    memcpy(r, &s, 8)
    memcpy(noCheck(r+8), a, s)
    l = s+1
    arr = []char
    noCheck(arr->length = s+8)
    noCheck(arr->elemSize = 1)
    noCheck(arr->data = r)
    return arr
}

//Function used to get the size of the serialized pointer.
serlen(data []char) int {
    sarr = []char{data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]}
    sptr int* = noCheck(sarr->data)
    return *sptr
}

//Function used to unserialize the content of a struct.
unser(data []char) ptr {
    sptr = serlen(data)
    r = memoryAlloc(sptr)
    memcpy(r, noCheck(data->data + 8), sptr)
    return r
}