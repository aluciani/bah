#include "<windows.h>"
#include "<stdio.h>"
#include "<conio.h>"
#include "<tchar.h>"


#define! void ptr

const SIZE_OF_INT = 8
const SIZE_OF_CHAR = 1
const SIZE_OF_INT32 = 4
const SIZE_OF_FLOAT32 = 4
const SIZE_OF_FLOAT = 8


//Will return the length of an array.
//This only works on arrays.
len(a ptr) int {
    i = 0
    noCheck(array(void*) * arr = a)
    noCheck(i = arr->length)
    return i
}

#define! memset(p ptr, v int, s int)

#include "BAH_MEM_COLLECTOR"


//Append will add the array b to the array a.
//Note: doesn't work with []char.
append(a ptr, b ptr) {
    noCheck(array(void*) * arrA = a)
    noCheck(array(void*) * arrB = b)
    lenA = 0
    lenB = 0
    realSizeA = 0
    realSizeB = 0
    noCheck(lenA = len(arrA))
    noCheck(lenB = len(arrB))

    if lenB == 0 {
        return
    }

    if lenA == 0 {
        noCheck(arrA->data = arrB->data)
        noCheck(arrA->length = arrB->length)
        return
    }

    noCheck(realSizeA = lenA * arrA->elemSize)
    noCheck(realSizeB = lenB * arrB->elemSize)


    buff = memoryAlloc(realSizeA + realSizeB+32)
    noCheck(memcpy(buff, arrA->data, realSizeA))
    noCheck(memcpy(buff+lenA, arrB->data, realSizeB))
    noCheck(arrA->length = lenA + lenB)
    noCheck(arrA->data = buff)
}

copy(a ptr, b ptr) {
    noCheck(array(void*) * arrA = a)
    noCheck(array(void*) * arrB = b)
    lenB = 0
    realSizeB = 0
    noCheck(lenB = len(arrB))
    noCheck(realSizeB = lenB * arrB->elemSize)
    noCheck(arrA->data = memoryAlloc(realSizeB))
    noCheck(memcpy(arrA->data, arrB->data, realSizeB))
    noCheck(arrA->length = arrB->length)
}



#define! mmap(addr int, ps int, prot int, flags int, fd int, offset int) ptr

const PROT_READ = 1
const PROT_WRITE = 2
const PROT_READWRITE = 3
const MAP_SHARED = 1
const MAP_ANONYMOUS = 32

//Will allocate a page of shared memory and returns a pointer to it.
//The size should be an multiple of 4096. A size of 0 will set the page size to the default (4096).
//Shared memory can be shared between two processes (after the use of fork()).
sharedMemory(size int) ptr {
    if size == 0 {
        size = 4096
    }
    r = mmap(0, size, PROT_READ + PROT_WRITE, MAP_SHARED + MAP_ANONYMOUS, -1, 0)
    return r
}

//Used for pre-allocating a number of element to an array.
//The content of the array is not initialized, it may contain garbage.
allocateArray(arr ptr, nbElems int) {
    noCheck(array(void*) * a = arr)
    noCheck(a->length = nbElems)
    noCheck(a->data = memoryAlloc(nbElems * a->elemSize))
}


//Example
// #include "string.bah"
// #include "memory.bah"
// main() {
//     a cpstring = memoryAlloc(30)
//     strcpy(a, "Hi!")
// }

#define! memcpy(det ptr, src ptr, s int)

#define ser(a ptr) []char

//Internal function used to serialize a pointer.
__serialize(a ptr, s int) []char {
    r cpstring = memoryAlloc(s + 9)
    memcpy(r, &s, 8)
    memcpy(noCheck(r+8), a, s)
    l = s+1
    arr = []char
    noCheck(arr->length = s+8)
    noCheck(arr->elemSize = 1)
    noCheck(arr->data = r)
    return arr
}

//Function used to get the size of the serialized pointer.
serlen(data []char) int {
    sarr = []char{data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]}
    return noCheck(*sarr->data)
}

//Function used to unserialize the content of a struct.
unser(data []char) ptr {
    sptr = serlen(data)
    r = memoryAlloc(sptr)
    memcpy(r, noCheck(data->data + 8), sptr)
    return r
}

