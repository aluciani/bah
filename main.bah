#include "iostream.bah"
#include "flags.bah"
#include "rand.bah"
#include "exec.bah"
#include "time.bah"

///////////////////////OS SPECIFIC THINGS////////////////////////
const BAH_DIR = "/opt/bah/"

#include "./globals.bah"

#include "./lexer.bah"
#include "./type.bah"
#include "./errors.bah"
#include "./parser.bah"

main(args []cpstring) {
    compilerState = compilerStateTag{}
    if len(args) != 2 {
        panic("Invalid usage of bah.")
    }
    
    fileName = args[1]
    compilerState.currentFile = fileName
    fm = fileMap{}
    f = fm.open(fileName)
    
    startTime = getTimeUnix()
    tokens = lexer(f)
    fm.close()

    if len(tokens) == 0 {
        panic("File '"+fileName+"' not recognized.")
    }

    elems = new Elems
    if includeFile("builtin.bah", elems) == false {
        panic("Could not find std-libs, please check '"+BAH_DIR+"'")
    }
    parseLines(tokens, elems)

    randFileName = "TMP_C_FILE_"
    i=0; for i < 9 {
        nb = randomInRange(0,99)
        s = intToStr(nb)
        randFileName = randFileName + s
        i = i + 1
    }
    randFileName = randFileName + ".c"

    fs = fileStream{}
    fs.open(randFileName, "w")
    fs.writeFile(OUTPUT)
    fs.close()

    outFileName = string(fileName)
    outFileName.trimRight(4)
    outFileNameStr = outFileName.str()
    gccArgs = "gcc ./"+ randFileName+ " -w -o "+outFileNameStr
    
    cLibs = compilerState.cLibs

    i=0;for i < len(cLibs) {
        l = cLibs[i]
        gccArgs = gccArgs + " -" + l
        i = i + 1
    }

    cmd = command(gccArgs)
    gccOut = cmd.run()
    removeFile(randFileName)
    if strlen(gccOut) == 0 {
        totalTime = getTimeUnix() - startTime
        println("\e[1;32mDone. ("+intToStr(totalLines)+" lines compiled in "+intToStr(totalTime / 1000000)+"ms)")
    } else {
        println("\e[1;31m[GCC-ERROR]\e[0m\nCould not compiled.")
    }

}