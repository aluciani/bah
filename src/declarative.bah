//Theses functions are obsolete and will be replaced when a redoing the library output system.
//The declarative functions are used to make declaration/definition of symbols without giving them a value (forward declaration).

//Forward-declares a function as C function.
declareFunc(fn func*, elems Elems*) {
    tmpfnRetCType = getCType(fn.returns.type, elems)
    tmpfnArgsCType = ""
    j=0; for j < len(fn.args) {
        arg = fn.args[j]
        ct = getCType(arg.type, elems)
        tmpfnArgsCType = tmpfnArgsCType + ct.str() + " " + arg.name
        j = j + 1
        if j < len(fn.args) {
            tmpfnArgsCType = tmpfnArgsCType + ", "
        }
    }

    OUTPUT = OUTPUT + rope(tmpfnRetCType.str() + " " + fn.name + "("+tmpfnArgsCType+");\n")
}

//Forward-declares a variable as C variable.
declareVar(v variable*, elems Elems*) {
    if v.isConst == true {
        OUTPUT = OUTPUT + rope("#define "+v.name+" "+v.constVal+"\n")
    } else {
        cType = getCType(v.type, elems)
        OUTPUT = OUTPUT + rope(cType.str() + " " + v.name+";\n")
    }
}

//Declare every symbol present inside a scope.
declareAll(elems Elems*) {

    OUTPUT = rope("
#define noCheck(v) v
#define array(type)	\
struct{	\
type *data; \
long int length; \
long int elemSize; \
}
typedef array(char*)* __BAH_ARR_TYPE_cpstring;
long int __BAH__main(__BAH_ARR_TYPE_cpstring);
")

    i=0; for i < len(compilerState.cIncludes), i++ {
        OUTPUT = OUTPUT + rope("#include "+compilerState.cIncludes[i]+"\n")
    }

    i=1; for i < len(compilerState.arrTypesDecl), i++ {
        t = compilerState.arrTypesDecl[i]
        elemType = string(t)
        elemType.trimLeft(15)
        elemCtype = getCType(elemType.str(), elems)
        OUTPUT = OUTPUT + rope("typedef array("+elemCtype.str()+")* "+t+";\n")
    }

    i=0; for i < len(elems.vars), i++ {
        v = elems.vars[i]
        declareVar(v, elems)
    }

    i=0; for i < len(elems.fns), i++ {
        fn = elems.fns[i]
        if fn.isBinding == true {
            continue
        }
        declareFunc(fn, elems)
    }
}