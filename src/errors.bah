#include "iostream.bah"
#include "string.bah"

#include "./lexer.bah"
#include "./logger.bah"

#define advertiseGeneric()

throwErr(tp ptr, format cpstring) {
    //println(OUTPUT)
    str = ""
    info = ""
    pos = 0
    if tp != null {
        fm = fileMap{}
        fileSrcStr = fm.open(compilerState.currentFile)
        t Tok* = tp
        ffmt = string(format)
        if strlen(t.ogCont) == 0 {
            t.ogCont = t.cont
        }
        ffmt.replace("{TOKEN}", "'"+t.ogCont+"'")
        format = ffmt.str()

        line = []char

        beg=t.pos; for beg > 0 {
            c = fileSrcStr[beg]
            if c == <char>10 {
                beg =beg + 1
                break
            }
            beg =beg - 1
        }

        pos = t.pos - beg + 1

        i=beg; for i < fm.size, i++ {
            c = fileSrcStr[i]
            if c == <char>10 {
                break
            }
            if i == t.pos {
                errCont = []char
                offset = i
                for i < fm.size, i++ {
                    if i-offset >= strlen(t.ogCont) {
                        break
                    }
                    if fileSrcStr[i] != t.ogCont[i-offset] {
                        if isSpace(fileSrcStr[i]) == false {
                            break
                        }
                        offset++
                    }
                    errCont[len(errCont)] = fileSrcStr[i]
                }
                errTk = strToArr("\e[1;31m"+arrToStr(errCont)+"\e[1;37m")
                ii=0; for ii < len(errTk), ii++ {
                    line[len(line)] = errTk[ii]
                }
                i--
                continue
            }
            line[len(line)] = c
        }

        fm.close()
        str = arrToStr(line)
        info = intToStr(t.line) + ":" + intToStr(pos)
    }

    if debug == true {
        t Tok* = tp
        debugError("error", t.line, pos, pos+strlen(t.ogCont), format)
        debugExit()
    } else {
        advertiseGeneric()
        println("\e[1;31m[ERROR]\e[0m "+compilerState.currentFile+":" + info + "\n\e[1;37m\t" + str + "\e[0m\n" + format)
    }

    exit(1)

}

throwWarning(s cpstring) {
    println("\e[1;33m[WARNING]\e[0m " + compilerState.currentFile + "\n\e[0m\t" + s + "\e[0m")
}

throwWarningLine(s cpstring, l int) {
    println("\e[1;33m[WARNING]\e[0m " + compilerState.currentFile + ":"+intToStr(l)+"\n\e[0m\t" + s + "\e[0m")
}

throwNoticeLine(s cpstring, l int) {
    if noticeEnabled == false {
        return
    }
    println("\e[1;36m[NOTICE]\e[0m " + compilerState.currentFile + ":"+intToStr(l)+"\n\e[0m\t" + s + "\e[0m")
}