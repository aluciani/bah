//Functions used as helper to generate C code.

//Used when setting the value of an array's member.
//This will set the member at provided index, reallocate the array if needed,
//and increment the length if the index is greater than all others.
genArrRealloc(v variable*, preVal cpstring, val cpstring, elems Elems*) cpstring {
    vn = string(v.name)


    nLengthTok Tok* = v.arrIndex
    root Tok* = v.arrRoot
    nLengthDecl = ""
    nLength = nLengthTok.cont
    if nLengthTok.isFunc || nLengthTok.isOper {
        nLength = genCompilerVar()
        nLengthDecl = "unsigned int "+nLength+" = "+nLengthTok.cont+";"
    }

    if RCPavailable() && isRCPtype(v.type, elems) {
        cType = getCType(v.type, elems)
        if isRCPpointerType(v.type) == false {
            preVal += "
            RCP_decr(&(("+cType.str()+"*)"+root.cont+"->data)["+nLength+"], sizeof("+cType.str()+"));
            "
        } else {
            preVal += "
            RCP_decr((("+cType.str()+"*)"+root.cont+"->data)["+nLength+"], sizeof("+cType.str()[:cType.length-1]+"));
            "
        }
    }

    return nLengthDecl+"
    __Bah_realocate_arr("+root.cont+", "+nLength+");
    "+preVal+"(("+getCType(v.type, elems).str()+"*)"+root.cont+"->data)["+nLength+"] = "+val
}

//This is used to generate concatenation of n cpstrings.
//The cpstring passed as 'strs' must be in reverse order.
genConcat(strs []cpstring, elems Elems*) cpstring {
    buff = genCompilerVar()
    r = "char** "+buff+" = alloca("+intToStr(len(strs))+" * sizeof(char*));"

    i=0; for i < len(strs), i++ {
        r += buff + "["+intToStr(len(strs) - i - 1)+"] = " + strs[i] + ";" 
    }

    if isGlobal() {
        INIT += rope(r)
    } else {
        OUTPUT += rope(r)
    }
    rstr = registerRCPvar("cpstring", "__Bah_multiple_concat("+buff+", "+intToStr(len(strs))+")", elems) //result var

    return rstr
}