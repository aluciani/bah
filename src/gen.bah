genArrRealloc(v variable*, preVal cpstring, val cpstring, elems Elems*) cpstring {

    vn = string(v.name)
    nstr = splitStringBefore(vn, "->data[")

    vn.trimLeft(strlen(nstr) + 7)
    vn.trimRight(1)
    nLengthStr = vn.str()

    return "
    {
        unsigned long nLength = " + nLengthStr + ";
        if (nLength >= "+nstr+"->length) {
            if (nLength >= "+nstr+"->realLength) {
                if ("+nstr+"->realLength != 0) {
                    "+nstr+"->realLength *= 2;
                } else {
                    "+nstr+"->realLength = 50;
                }
                void * newPtr = memoryRealloc("+nstr+"->data, ("+nstr+"->realLength)*sizeof("+getCType(v.type, elems).str()+"));
                "+nstr+"->data = newPtr;
            }
            "+val+";
            "+nstr+"->length = nLength+1;
        } else {
            "+preVal+val+";
        }
    }
    "

    // return "
    // {
    //     unsigned long nLength = " + nLengthStr + ";
    //     if (" + nstr + "->length < nLength+1) {
    //         if ((nLength+1) % 50 == 0 || "+nstr+"->length == 0) {
    //             void * newPtr = memoryRealloc("+nstr+"->data, (nLength+50)*sizeof("+getCType(v.type, elems).str()+"));
    //             "+nstr+"->data = newPtr;
    //         }
    //         "+val+";
    //         "+nstr+"->length = nLength+1;
    //     } else {
    //         "+preVal+val+";
    //     }
    // }"

}