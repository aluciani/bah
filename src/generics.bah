//Generics are the closest things to templates in Bah.
//They are function with one or many arguments that are defined as type <any>.

#define dupElems(e Elems*) Elems*
#define parseLines(l []Tok, elems Elems*)

currGen ptr //used for error handling

//Wrapper for a generic function (function with an argument of <any> type)
struct genericFunc {
    tokens: []Tok
    declared: []func*
    baseFn: func*
    tokenName: Tok*
    callToken: Tok*

    //Used for duping the base function declaration to redeclare it with the correct types.
    dupBaseFn() func* {
        r = new func
        r.name = this.baseFn.name
        i=0; for i < len(this.baseFn.args), i++ {
            a = this.baseFn.args[i]
            na = new variable
            *na = *a
            r.args[i] = na
        }
        r.returns = this.baseFn.returns
        return r
    }

    //Used for error handling, to fetch the call line.
    setCurrGeneric(t Tok*) {
        this.callToken = t
    }

    //If the generic has already been declared with these types, we do not need to redeclare it.
    isAlreadyDecl(n cpstring) bool {
        i=0; for i < len(this.declared), i++ {
            if this.declared[i].name == n {
                return true
            }
        }
        return false
    }

    //Takes the baseFunction, redeclares it with current types.
    declare(fn func*, elems Elems*) {
        oldOut = OUTPUT
        this.declared[len(this.declared)] = fn
        OUTPUT = rope(getCType(fn.returns.type, elems).str()+" __generic_"+fn.name+"(")

        fnElems = dupElems(elems)
        i=0; for i < len(fn.args), i++ {
            arg = fn.args[i]

            arg.declScope = elems
            arg.isArg = true
            fnElems.vars[len(fnElems.vars)] = arg

            OUTPUT += rope(getCType(arg.type, elems).str() + " " + arg.name)
            
            if i+1  < len(fn.args) {
                OUTPUT += rope(", ")
            }
        }

        OUTPUT += rope(") {\n")

        beginRCPscope(fnElems, fn.args)
        ocurrFnElems = compilerState.currFnElems
        oCurrGen = currGen
        currGen = this
        oCurrFn = currentFn

        compilerState.currFnElems = fnElems
        currentFn = fn
        
        parseLines(this.tokens, fnElems)
        OPTI_checkFuncScopeRef(fnElems)

        compilerState.currFnElems = ocurrFnElems
        currentFn = oCurrFn
        currGen = oCurrGen

        if fn.returned == false {
            if len(fn.returns.type) > 0 {
                throwErr(this.tokenName, "Function '"+fn.name+"' is not returned.")
            }
            endRCPscope(fnElems, fn.args)
        }

        code = OUTPUT + rope("};\n")
        OUTPUT = oldOut
        postDeclHandle.append(code)
    }
}

generics = []genericFunc* //All declared generics.

//Used for error handling.
//If the error is thrown while parsing a generic, this will print more information about the current generic.
advertiseGeneric() {
    if currGen == null {
        return
    }
    gen genericFunc* = currGen

    println("[Generic] called here: "+compilerState.currentFile+":"+intToStr(gen.callToken.line))

}