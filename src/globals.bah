OUTPUT = rope("") //the C output
NEXT_LINE = "" //if we need to add something to the next C line

INIT = rope("") //the C init function for initializing outter scope stuff (global vars...)

postDeclHandle = rope("")

//Bah variable
struct variable {
    name: cpstring = ""
    type: cpstring = ""
    isConst: bool = false
    constVal: cpstring = ""
    isArray: bool = false
    from: cpstring = ""
    declScope: ptr
    isGlobal: bool = false
    declRope: rope*
    arrIndex: ptr // Tok*
    arrRoot: ptr // Tok*
    //safety
    canBeNull: bool = false
    iterScope: ptr = null
    //optimizations
    canBeReg: bool
    isReg: bool = false
    lastSet: ptr
    isArg: bool = false
}

//Bah struct member
struct structMemb extend variable {
    def: cpstring = ""
    isFn: bool = false
}

//Bah function
struct func {
    name: cpstring = ""
    args: []variable*
    returns: variable*
    returned: bool
    isBinding: bool = false
    isCbinding: bool = false
    from: cpstring = ""
    file: cpstring = ""
    line: uint32 = 1
    isVar: bool = false
    //optimizations
    used: bool = false
    code: rope* = null
    isMut: bool = false
    isImported: bool = false
    //safety
    exits: bool = false
    couldAlreadyReturn: bool = false
}

//Interface between Bah struct and C struct
struct cStruct {
    name: cpstring = ""
    members: []structMemb*
    methods: []func*
    postCode: cpstring = ""
    print: bool
    extendedFrom: cpstring = ""
    isBinding: bool = false
    hasRCPmemb: bool = false
}

struct varCheck {
    v: variable*
    checkNull: bool
}

//Every elements of the program for a specific scope
struct Elems {
    vars: []variable*
    structs: []cStruct*
    types: []cpstring
    fns: []func*
    parent: Elems*
    id: uint32
    //safety
    deletedVars: []variable*
    branchChecks: []varCheck
    //optimization
    currFlowEnd: bool

    isChildren(e Elems*) bool {
        if e == null {
            return false
        }
        for e.parent != null {
            if e.parent == this {
                return true
            }
            e = e.parent
        }
        return false
    }

}

//Additional info for the compiler no matter the scope
struct compilerStateTag {
    includes: []cpstring
    cIncludes: []cpstring
    cLibs: []cpstring
    currentFile: cpstring
    currentDir: cpstring = "./"
    isBranch: bool = false
    isFor: bool = false
    arrTypesDecl: []cpstring
    haveEntryPoint: bool = false
    evals: []cpstring
    hasImports: bool = false
    currForElems: Elems*
    currFnElems: Elems*
}

shouldOnlyDecl = false

compilerState compilerStateTag

currentCStruct cStruct*

threadCount = 0

currentFn func* = null

totalLines = 0

totalSize = 0

totalLexerTime = 0

RCPenabled = false

RCPlevel = 0

flags flags

currSetVar variable* = null

//safety
currChecks = []varCheck

prevIfExits = false

prevIfChecks = []varCheck

prevIfShortcut = "" //fixes code emitted before a line being between '}' and 'else'

begIfHandle = rope("")

funcCache = map func* //caches function searches

currentCompiling = 0

doneCompilingChan = chan bool