//These are functions used for memory management (such as -rcp).

//Stupid function: weither RCP is enabled or not.
RCPavailable() bool {
    return RCPenabled == true
}

RCPisTokRef(t Tok*, tp str, elems Elems*) bool {
    return t.type == TOKEN_TYPE_VAR && t.isFunc == false && isRCPtype(tp, elems) && string(t.cont).hasPrefix("____BAH_COMPILER_VAR_") == false && len(t.cont) != 0
}

pointerizeVal(n str) str {
    if n[0] == '*' {
        return n[1:]
    }

    return "&"+n
}

//Returns true if the 'ce' scope is 'e' scope or one of its ancestor.
isOutterScope(ce ptr, e Elems*) bool {
    for e != null {
        if ce == e {
            return true
        }
        e = e.parent
    }
    return false
}

RCPincrVarStr(n str, isPtr bool) str {
    if isPtr == false {
        return "RCP_incr("+pointerizeVal(n)+", sizeof("+n+"));\n"
    }
    return "RCP_incr("+n+", sizeof(*"+n+"));\n"
}
RCPincrVar(n str, isPtr bool) {
    OUTPUT += rope(RCPincrVarStr(n, isPtr))
}

RCPdecrVarStr(n str, isPtr bool) str {
    if isPtr == false {
        return "RCP_decr("+pointerizeVal(n)+", sizeof("+n+"));\n"
    }
    return "RCP_decr("+n+", sizeof(*"+n+"));\n"
}

RCPdecrVar(n str, isPtr bool) {
    OUTPUT += rope(RCPdecrVarStr(n, isPtr))
}

RCPkeepFuncRef(t Tok*, tp str, elems Elems*) {
    if isRCPtype(tp, elems) == false {
        return
    }
    isVar = false
    if t.type == TOKEN_TYPE_VAR && currSetVar != null {
        let v = searchVirtVarByToken(t, elems) then {
            if v.name == currSetVar.name {
                isVar = true
            }
        }
    }

    if isVar || (t.isOper == false && (t.isFunc || string(t.cont).hasPrefix("____BAH_COMPILER_VAR_"))) {
        tmpName = "keep_ref_"+genCompilerVar()
        elems.vars[len(elems.vars)] = new variable {
            name: tmpName
            type: tp
            declScope: elems
        }
        OUTPUT += rope(getCType(tp, elems).str()+" "+tmpName+" = "+t.cont+";\n")
        if isVar && currSetVar != null {
            RCPincrVar(currSetVar.name, isRCPpointerType(currSetVar.type))
        }
        t.cont = tmpName
    }
}


RCPendScope(e Elems*) {
    if RCPavailable() == false {
        return
    }
    i=0; for i < len(e.vars), i++ {
        v = e.vars[i]
        if v.declScope == null {
            continue
        }
        if v.declScope != e && e.isChildren(v.declScope) == false {
            continue
        }
        if isRCPtype(v.type, e) == false {
            continue
        }
        if string(v.name).hasPrefix("____BAH_COMPILER_VAR_") {
            continue
        } 
        RCPdecrVar(v.name, isRCPpointerType(v.type))
    }
}

RCPendScopeRange(e Elems*, to Elems*) {
    if RCPavailable() == false {
        return
    }
    for e != to.parent {
        RCPendScope(e)
        e = e.parent
    }

}

registerRCPtrackedVar(t str, c str, elems Elems*) str {
    av = new variable
    av.type = t
    av.declScope = elems
    av.name = "keep_ref_"+genCompilerVar()
    elems.vars[len(elems.vars)] = av
    cType = getCType(av.type, elems)
    if isGlobal() {
        OUTPUT += rope(cType.str()+" "+av.name+";")
        INIT += rope(av.name+" ="+c+";")
    } else {
        OUTPUT += rope(cType.str()+" "+av.name+" ="+c+";")
    }
    return av.name
}


//Used for assinging a compilerVar to a value, registering it inside scope variables for memory management purposes.
registerRCPvar(t str, c str, elems Elems*) str {
    av = new variable
    av.type = t
    av.declScope = elems
    av.name = genCompilerVar()
    elems.vars[len(elems.vars)] = av
    cType = getCType(av.type, elems)
    if isGlobal() {
        OUTPUT += rope(cType.str()+" "+av.name+";")
        INIT += rope(av.name+" ="+c+";")
    } else {
        OUTPUT += rope(cType.str()+" "+av.name+" ="+c+";")
    }
    return av.name
}
