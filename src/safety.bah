//Theses safety features can be disabled with '-unsafe' or need to be enabled using 'fixMe'.

//Used to get if a variable as been checked as null inside the current scope:
// if a == null {
// ...current scope...
//}
checkedNull(v str, elems Elems*) bool {
    for elems != null, elems = elems.parent {
        i=0; for i < len(elems.branchChecks), i++ {
            bc = elems.branchChecks[i]
            if bc.v == null {
                continue
            }
            if bc.v.name == v {
                return bc.checkNull
            }
        }
        i=0; for i < len(currChecks), i++ {
            bc = currChecks[i]
            if bc.v == null {
                continue
            }
            if bc.v.name == v {
                return bc.checkNull
            }
        }
    }
    return false
}

//Used to get if a variable as been checked as not null inside the current scope:
// if a != null {
// ...current scope...
//}
checkedNotNull(v str, elems Elems*) bool {
    for elems != null, elems = elems.parent {
        i=0; for i < len(elems.branchChecks), i++ {
            bc = elems.branchChecks[i]
            if bc.v == null {
                continue
            }
            if bc.v.name == v {
                return bc.checkNull == false
            }
        }
        i=0; for i < len(currChecks), i++ {
            bc = currChecks[i]
            if bc.v == null {
                continue
            }
            if bc.v.name == v {
                return bc.checkNull == false
            }
        }
    }
    return false
}

//Returns true if the compiler is allowed to set the null state of the variable to false (variable.canBeNull = false).
//The compiler is allowed to change the null state only if the variable was declared in the current scope,
//or if the current scope has checked the variable as null.
canChangeNullState(v variable*, elems Elems*) bool {
    if v.declScope == elems {
        return true
    }
    return checkedNull(v.name, elems)
}

//Checks if a value can be null inside a certain scope.
checkCanBeNull(t Tok*, tt str, elems Elems*) {
    if isUnsafe == false && string(compilerState.currentDir).hasPrefix(BAH_DIR) == false && isRCPpointerType(tt) && t.cont[0] != '&' && t.cont[0] != '*' {
        sv = searchVarByToken(t, elems)
        if sv != null {
            if sv.canBeNull == true && checkedNotNull(sv.name, elems) == false {
                globCheck = ""
                s = searchStruct(sv.type, elems)
                if sv.isGlobal == true && s != null {
                    globCheck = " or declare the var as 'new "+s.name+"'."
                }
                throwErr(t, "{TOKEN} can contain a null value. Check if the value is null"+globCheck+".")
            }
        }
    }
}

//Checks if a value can be null inside a certain scope and returns the value.
getCanBeNull(t Tok*, tt str, elems Elems*) bool {
    if isUnsafe == false && string(compilerState.currentDir).hasPrefix(BAH_DIR) == false && isRCPpointerType(tt) && t.cont[0] != '&' && t.cont[0] != '*' {
        sv = searchVarByToken(t, elems)
        if sv != null {
            if sv.canBeNull == true && checkedNotNull(sv.name, elems) == false {
                return true
            }
        }
    }
    return false
}

//When this function is called on a scope, it tells its parent scope that the value checked in the current line's condition (elems.branchChecks)
//can no longer be null because this branch also terminates its parent scope on end.
//Examples:
// ...parent scope...
// if a == null {
//     ...current scope...
//     panic("a is null")
// }
//Or:
// ...parent scope...
// if a == null {
//     ...current scope...
//     return 0
// }
//Or:
// ...parent scope...
// if a == null {
//     ...current scope...
//     myCustomError()
// }
setNullStateBranchFlowEnd(elems Elems*) {
    if currentFn == null {
        return
    }
    if compilerState.isBranch == false {
        if currentFn.couldAlreadyReturn == false {
            currentFn.exits = true   
        }
    } else {
        i=0; for i < len(elems.branchChecks), i++ {
            bc = elems.branchChecks[i]
            if bc.v == null {
                continue
            }
            if bc.checkNull == true {
                j=0; for j < len(elems.parent.vars), j++ {
                    pv = elems.parent.vars[j]
                    if pv.name == bc.v.name {
                        pv.canBeNull = false
                        break
                    }
                }
            }
        }
        if prevLine == LINE_TYPE_IF && prevIfExits == true {
            currElems = elems; for currElems != null, currElems = currElems.parent {
                i=0; for i < len(currElems.branchChecks), i++ {
                    bc = currElems.branchChecks[i]
                    if bc.v == null {
                        continue
                    }
                    if bc.checkNull == true {
                        j=0; for j < len(currElems.parent.vars), j++ {
                            pv = currElems.parent.vars[j]
                            if pv.name == bc.v.name {
                                pv.canBeNull = false
                                break
                            }
                        }
                    }
                }
            }
        }
        prevIfExits = true
    }
}

//Returns if '-fixMe' was set and the current file is not inside the bah directory.
fixMeEnabled() bool {
    if isFixMeEnabled == false {
        return false
    }
    return isInside(BAH_DIR, compilerState.currentDir) == false
}

//Used to register a variable declaration for the fixMe engine to do its job.
fixMeRegisterVar(v variable*, t Tok*) {
    if v.isReg == true {
        return
    }
    name = v.name
    if isRCPpointerType(v.type) == false {
        name = "&"+name
    }
    NEXT_LINE += "
    fixMeAddVar("+strLitteralToBahStr("\""+v.name+"\"")+", "+name+", "+strLitteralToBahStr("\""+compilerState.currentFile+":"+intToStr(t.line)+"\"")+");
    "
}

//Used to tell the fixMe engine that a variable as reached its end of life (end of scope).
fixMeEndScope(elems Elems*, t Tok*) {
    if fixMeEnabled() == false {
        return
    }
    i=0; for i < len(elems.vars), i++ {
        v = elems.vars[i]
        if v.declScope == elems {
            if v.isReg == true {
                return
            }
            name = v.name
            if isRCPpointerType(v.type) == false {
                name = "&"+name
            } else {
                continue
            }
            OUTPUT += rope("
            fixMeRemVar("+strLitteralToBahStr("\""+v.name+"\"")+", "+name+", "+strLitteralToBahStr("\""+compilerState.currentFile+":"+intToStr(t.line)+"\"")+");
            ")
        }
    }
}

//Used for testing a variable before using it.
//This will cause the compiled program to crash with an error if the variable is not sane.
//This could be for instance because a pointer from a stack variable was stocked outside the variable's scope
//and used after the variable end of life, causing the program to read random stack data.
fixMeTestVar(t Tok*, ltp lineType, elems Elems*) {
    if fixMeEnabled() == false {
        return
    }

    name = t.cont

    if name[0] == '*' {
        name = name[1:]
    } else {
        name = "&"+name
    }

    fn = "fixMeIsVarOk("+name+", "+strLitteralToBahStr("\""+name+"\"")+", "+strLitteralToBahStr("\""+compilerState.currentFile+":"+intToStr(t.line)+"\"")+")"
    
    if ltp == LINE_TYPE_ELSE {
        prevIfShortcut = fn+"&&"
        return
    }

    OUTPUT += rope(fn+";\n")
}

//Returns true if the token representing a value as a known static value or if it is the product of a runtime computation.
//For instance, a const has by definition a static value.
isStaticToken(t Tok*, elems Elems*) bool {
    if t.type == TOKEN_TYPE_BOOL && (t.cont != "true" || t.cont != "false") {
        return false
    }

    if t.type == TOKEN_TYPE_FUNC || t.isFunc || t.isOper {
        return false
    }

    if t.type == TOKEN_TYPE_VAR {
        v = searchVirtVarByToken(t, elems)
        if v != null {
            return v.isConst
        }
    }

    return true
}

//Returns the static value of a token.
//This works with string litterals/numbers and const values.
getStaticValue(t Tok*, elems Elems*) str {
    if t.type == TOKEN_TYPE_INT || t.type == TOKEN_TYPE_FLOAT || t.type == TOKEN_TYPE_STR || t.type == TOKEN_TYPE_BOOL || t.type == TOKEN_TYPE_CHAR {
        return t.cont
    }
    if t.type == TOKEN_TYPE_VAR {
        let v = searchVirtVarByToken(t, elems) then {
            if v.isConst {
                return v.constVal
            }
        }

    }
    return ""
}

//Use for checking bounds at runtime (and compile time)
// vType:
//        0 = array
//        1 = buffer
//        2 = str
checkBounds(arr Tok*, vType int, t Tok*, elems Elems*) {
    if isUnsafe {
        return
    }
    ind = 0
    if t.type == TOKEN_TYPE_INT {
        ind = strToInt(t.cont)
    } else if t.type == TOKEN_TYPE_VAR && t.isFunc == false && t.isOper == false {
        let v = searchVirtVarByToken(t, elems) then {
            if v.isConst {
                ind = strToInt(v.constVal)
            }
        }
    }
    //  else {
    //     name = genCompilerVar()
    //     OUTPUT += rope(getCType(getTypeFromToken(t, true, elems), elems).str()+" "+name+" = "+t.cont+";")
    //     t.cont = name
    // }
    if ind < 0 {
        throwErr(t, "Cannot use index {TOKEN} ("+intToStr(ind)+" < 0).")
    }

    // if vType == 0 {
    //     if isRCPpointerType(arr.bahType[2:]) {
    //         arr.cont = "__Bah_getVal_boundsChecked("+arr.cont+", "+t.cont+", "+strLitteralToBahStr("\"array out of bounds violation on line "+compilerState.currentFile+":"+intToStr(t.line)+"\"")+")"
    //     }
    // }
}