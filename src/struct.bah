//These functions are used for easier struct/member handling.

#include "./globals.bah"

#define searchFunc(n str, e Elems*, c bool) func*
#define parseFnType(n string*) func*
#define getCType(t str, e Elems*) string

//Returns true if the token content 'n' contains a struct separator (such as '.').
//Struct separator '->' is also valid because of midway C code translation.
hasStructSep(n string*) bool {
    max = n.length - 1
    i=0; for i < max, i++ {
        c = n.charAt(i)
        if c == '.' {
            return true
        } else if c == '-' && n.charAt(i+1) == '>' {
            return true
        }
    }
    
    return false
}

//Returns the token content before the struct separation.
//a.b.c -> a
splitStructSepBefore(n string*) string {
    
    if n.containsChar('.') {
        res = string(splitStringBefore(*n, "."))
        return res
    }
    if n.contains("->") {
        res = string(splitStringBefore(*n, "->"))
        return res
    }

    return string("")
}

//Returns the last member of a struct/member chain.
//a.b.c -> c
splitStructSepAfter(n string) string {
    i=n.length-1; for i >= 0 {
        c = n.charAt(i)
        if c == '.' {
            break
        } else if c == '>' {
            pc = n.charAt(i-1)
            if pc == '-' {
                break
            }
        }
        i--
    }
    i++
    n.trimLeft(i)
    return n
}

//Searches a struct by name.
searchStruct(name str, elems Elems*) cStruct* {
    if len(name) == 0 {
        return null
    }

    //Removing *
    i=0; for i < len(name), i++ {
        if name[len(name)-i-1] != '*' {
            break
        }
    }
    if i != 0 {
        name = name[:len(name)-i]
    }

    let s = structCache[name] then {
        return s
    }

    i=len(elems.structs)-1; for i != -1, i-- {
        s = elems.structs[i]
        if s.name == name {
            structCache[s.name] = s
            return s
        }
    }


    return null
}

//Searches a member by name inside a structure.
searchStructMemb(name str, s cStruct*, elems Elems*) structMemb* {
    n = string(name)
    if hasStructSep(&n) {
        rn = splitStructSepBefore(&n)
        name = rn.content
        if n.charAt(rn.length) == '.' {
            n.trimLeft(1 + rn.length)
        } else {
            n.trimLeft(2 + rn.length)
        }
        membs = n.content
        memb = searchStructMemb(name, s, elems)
        if n.length > 0 {
            s = searchStruct(memb.type, elems)
            nstr = n.str()
            memb = searchStructMemb(nstr, s, elems)
        }
        return memb
        
    }
    members = s.members
    i=0; for i < len(members) {
        m = members[i]
        if m.name == name {
            return m
        }
        i++
    }
    mthds = s.methods
    i=0; for i < len(mthds) {
        m = mthds[i]
        if m.name == name {
            sm = new structMemb
            sm.name = m.name
            sm.from = m.from
            sm.type = m.returns.type
            sm.isFn = true
            return sm
        }
        i++
    }

    if len(s.extendedFrom) == 0 {
        return null
    }

    es = searchStruct(s.extendedFrom, elems)
    if es == null {
        return null
    }
    
    return searchStructMemb(name, es, elems)
}

//Searches a method by name inside a structure.
searchStructMethod(name str, s cStruct*, elems Elems*) func* {
    if s == null {
        return null
    }

    fn = searchFunc(s.name+"__"+name, elems, true)
    if fn != null {
        return fn
    }

    i=0; for i < len(s.members), i++ {
        // m = s.members[i]
        if s.members[i].name == name {
            st = string(s.members[i].type)
            fn = parseFnType(&st)
            fn.name = name
            fn.isVar = true
            return fn
        }
    }

    s = searchStruct(s.extendedFrom, elems)

    return searchStructMethod(name, s, elems)
}

//Legacy function that used to declare a struct's methods on inline struct declaration.
//Now declares members default values, initializa array/map/channel members and call ._init if present.
//Will not declare default values for every member which index is present in excl.
declareStructMethods(v variable*, excl []int, s cStruct*, elems Elems*) str {
    code = ""
    members = s.members
    typec = string(v.type)
    sep = "."
    amp = "&"
    if typec.containsChar('*') {
        sep = "->"
        amp = ""
    }
    i=0; for i < len(members), i++ {
        j=0; for j < len(excl), j++ {
            if excl[j] == i {
                break
            }
        }
        if j != len(excl) {
            continue
        }
        m = members[i]
        cmpt = string(m.type)
        if m.def != "" {
            if m.def != "false" && m.def != "0" && m.def != "null" {
                code += v.name + sep + m.name + " = " + m.def + ";\n"
            }
            continue
        }
        if cmpt.hasPrefix("[]") == 1 {
            cmpt.trimLeft(2)
            cmptstr = cmpt.str()
            elemCType = getCType(cmptstr, elems)
            elemCTypeStr = elemCType.str()
            code += v.name + sep + m.name + " = memoryAlloc(sizeof(struct Bah_Array_Type));
            "+v.name+sep+m.name+"->length = 0;
            "+v.name+sep+m.name+"->elemSize = sizeof("+elemCTypeStr+");
            "
            continue
        }
        if cmpt.hasPrefix("map:") == 1 {
            cmpt.trimLeft(4)
            code += v.name + sep + m.name + " = mapWrapper();\n"
            continue
        }
        if cmpt.hasPrefix("chan:") == 1 {
            cmpt.trimLeft(5)
            code += v.name + sep + m.name + " = channel();\n"
        }
    }

    if s.isBinding == false {
        found = 0
        i=0; for i < len(s.methods), i++ {
            m = s.methods[i]
            if m.name == "_init" {
                code += s.name+"__"+m.name+"("+amp+v.name+");\n"
                found++
            } else if m.name == "_end" {
                if sep == "->" {
                    code += "memoryOnEnd("+v.name+", "+s.name+"__"+m.name+");\n"
                }
                found++
            }
            if found == 2 {
                break
            }
        }
    }

    return code
}