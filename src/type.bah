#include "iostream.bah"
#include "string.bah"

#include "./lexer.bah"
#include "./struct.bah"

typeAsStar(t cpstring) bool {
    return t[strlen(t)-1] == '*'
}

isRCPpointerType(t cpstring) bool {
    if strHasPrefix(t, "function(") {
        return false
    }
    return t == "cpstring" || t == "ptr" || typeAsStar(t) || strHasPrefix(t, "[]") || strHasPrefix(t, "chan:") || strHasPrefix(t, "map:")
}

isRCPtype(t cpstring, elems Elems*) bool {
    if isRCPpointerType(t) == true {
        return true
    }
    s = searchStruct(t, elems)
    return s != null && s.isBinding == false
}


getCType(t cpstring, elems Elems*) string {
    if strlen(t) == 0 {
        return string("void")
    }

    tp = string(t)
    tp.replace(" ", "")
    if tp.hasPrefix("[]") {
        tp.trimLeft(2)
        tpstr = tp.str()
        tp = getCType(tpstr, elems)
        t = tp.str()
        r = "array("+t+")*"
        return string(r)
    }
    

    ctp = tp
    ctp.replace("*", "")

    if tp.hasPrefix("chan:") == 1 {
        tp.set("struct channel *")
    } else if tp.hasPrefix("map:") == 1 {
        tp.set("struct mapWrapper *")
    } else if tp.hasPrefix("buffer:") == 1 {
        tp.set("char*")
    } else if ctp.str() == "int" {
        tp.replace("int", "long int")
    } else if ctp.str() == "int32" {
        tp.replace("int32", "int")
    } else if ctp.str() == "uint32" {
        tp.replace("uint32", "unsigned int")
    } else if ctp.str() == "uint" {
        tp.replace("uint", "unsigned long int")
    } else if ctp.str() == "float32" {
        tp.replace("float32", "float")
    } else if ctp.str() == "ufloat32" {
        tp.replace("ufloat32", "unsigned float")
    } else if ctp.str() == "ufloat" {
        tp.replace("ufloat", "unsigned double")
    } else if ctp.str() == "float" {
        tp.replace("float", "double")
    } else if ctp.str() == "long" {
        tp.replace("long", "long long")
    } else if ctp.str() == "ulong" {
        tp.replace("ulong", "unsigned long long")
    } else if ctp.str() == "cpstring" {
        tp.replace("cpstring", "char *")
    } else if ctp.str() == "ptr" {
        tp.replace("ptr", "void *")
    } else if ctp.str() == "ushort" {
        tp.replace("ushort", "unsigned short")
    } else if ctp.str() == "byte" {
        tp.replace("byte", "unsigned char")
    } else if ctp.str() == "bool" {
        tp.replace("bool", "char")
    } else if ctp.str() == "char" {
        //do nothing for now
    } else {
        
        ctpstr = ctp.str()
        s = searchStruct(ctpstr, elems)
        if s != null {
            tp.prepend("struct ")
        } else {
            i=0; for i < len(elems.types) {
                ct = elems.types[i]
                if ctp.compare(ct) {
                    return tp
                }
                i = i + 1
            }
            return string("")
        }

    }

    return tp

}

intTypes = []cpstring{
    "int",
    "int32",
    "uint",
    "uint32",
    "bool"
}

floatTypes = []cpstring{
    "float",
    "float32",
    "ufloat",
    "ufloat32"
}

compTypeEquiv(a cpstring, b cpstring, first bool) bool {
    //rules
    if a == "cpstring" && strHasPrefix(b, "buffer:") {
        return true
    }

    if first == false {
        return false
    }

    if compTypeEquiv(b, a, false) {
        return true
    }

    return a == b
}

compTypes(a cpstring, b cpstring) bool {
    if a == b || a == "ptr" || b == "ptr" {
        return true
    }

    if a in intTypes && b in intTypes {
        return true
    }
    if a in floatTypes && b in floatTypes {
        return true
    }

    return compTypeEquiv(a, b, true)
}