//These are function used for Bah to C type handling.

#include "./errors.bah"
#include "./lexer.bah"
#include "./struct.bah"

#define searchVar(name cpstring, t Tok*, elems Elems*) variable*
#define isMissingVar(t Tok*, elems Elems*)

intTypes = []cpstring{
    "int",
    "int32",
    "uint",
    "uint32",
    "bool"
}

floatTypes = []cpstring{
    "float",
    "float32",
    "ufloat",
    "ufloat32"
}

//Does a type contain an unary.
typeAsStar(t cpstring) bool {
    return t[len(t)-1] == '*'
}

//Is a Bah type a pointer as C type.
isRCPpointerType(t cpstring) bool {
    if strHasPrefix(t, "function(") {
        return false
    }
    return t == "cpstring" || t == "ptr" || typeAsStar(t) || strHasPrefix(t, "[]") || strHasPrefix(t, "chan:") || strHasPrefix(t, "map:")
}

//Can a Bah type contain a pointer as C type.
isRCPtype(t cpstring, elems Elems*) bool {
    if isRCPpointerType(t) == true {
        return true
    }
    s = searchStruct(t, elems)
    return s != null && s.isBinding == false
}

//Returns a Bah type translated to C.
getCType(t cpstring, elems Elems*) string {
    if len(t) == 0 {
        return string("void")
    }

    if len(t) > 2 && t[0] == '[' && t[1] == ']' {
        r = "array("+getCType(t[2:], elems).str()+")*"
        return string(r)
    }

    i=0; for i < len(t), i++ {
        if t[len(t)-i-1] != '*' {
            break
        }
    }

    unars = ""
    if i > 0 {
        unars = t[len(t)-i:]
        t = t[:len(t)-i]
    }
    tp = string(t)

    if t[0] == '[' && t[len(t)-1] == ']' {
        t = "void*"
    } else if tp.hasPrefix("chan:") == 1 {
        unars = ""
        t ="struct channel *"
    } else if tp.hasPrefix("map:") == 1 {
        unars = ""
        t = "struct mapWrapper *"
    } else if tp.hasPrefix("buffer:") == 1 {
        unars = ""
        t = "char*"
    } else if t == "int" {
        t = "long int"
    } else if t == "int32" {
        t = "int"
    } else if t == "uint32" {
        t = "unsigned int"
    } else if t == "uint" {
        t = "unsigned long int"
    } else if t == "float32" {
        t = "float"
    } else if t == "float" {
        t = "double"
    } else if t == "long" {
        t = "long long"
    } else if t == "ulong" {
        t = "unsigned long long"
    } else if t == "cpstring" {
        t = "char*"
    } else if t == "ptr" {
        t = "void *"
    } else if t == "ushort" {
        t = "unsigned short"
    } else if t == "byte" {
        t = "unsigned char"
    } else if t == "bool" || t == "char" {
        t = "char"
    } else if tp.hasPrefix("function(") {
        return string("void*")
    } else {
        s = searchStruct(t, elems)
        if s != null {
            t = "struct " + t
        } else {
            i=0; for i < len(elems.types) {
                ct = elems.types[i]
                if t == ct {
                    tp.append(unars)
                    return tp
                }
                i = i + 1
            }
            return string("")
        }
    }

    return string(t+unars)
}

//Transforms a maybe type to a pointer type.
maybeToPtr(a cpstring) cpstring {
    if a[len(a)-1] != '!' {
        return a
    }
    a = a[:len(a)-1] + "*"
    return a
}

//Compare two types a and b.
//Returns true if a and b are compatible.
compTypes(a cpstring, b cpstring) bool {
    a = maybeToPtr(a)
    b = maybeToPtr(b)
    if a == b || a == "ptr" || b == "ptr" {
        return true
    }

    if a in intTypes && b in intTypes {
        return true
    }
    if a in floatTypes && b in floatTypes {
        return true
    }

    return a == b
}

//Returns the C translation of a variable type and name.
setCType(v variable*, elems Elems*) cpstring {
    tp = getCType(v.type, elems)
    t = tp.str()
    t = t + " " + v.name
    return t
}

//Returns the Bah type of a token.
//Throws an error if strict = true and the token is not a value.
getTypeFromToken(t Tok*, strict bool, elems Elems*) cpstring {
    if t == null {
        panic("WTF")
    }
    if t.bahType != "" {
        r = t.bahType
        return r
    }
    if t.type == TOKEN_TYPE_VAR {
        v = searchVar(t.cont, t, elems)
        if v == null {
            if strict == true {
                isMissingVar(t, elems)
                throwErr(t, "Unknown var {TOKEN}.")
            } else {
                return ""
            }
        }
        if strict == true {
            if v.type == "" {
                throwErr(t, "Cannot use {TOKEN} because it does not have any type.")
            }
        }
        t.bahType = v.type
        return v.type
    }

    if t.type == TOKEN_TYPE_FLOAT {
        return "float"
    }
    if t.type == TOKEN_TYPE_INT {
        return "int"
    }
    if t.type == TOKEN_TYPE_STR {
        return "cpstring"
    }
    if t.type == TOKEN_TYPE_CHAR {
        return "char"
    }
    if t.type == TOKEN_TYPE_BOOL {
        return "bool"
    }
    
    throwErr(t, "Cannot use {TOKEN} as value.")
    return ""

}

//Parses a Bah function type such as 'function(int,cpstring)'.
//Returns a temporary instance of a func.
parseFnType(cvt string) func* {
    nf = new func
    cvt.trimLeft(9)
    memory = []char
    j=0; for j < cvt.length {
        c = cvt.charAt(j)
        if c == ')' {
            break
        }
        arg = new variable
        arg.name = "arg_"+intToStr(len(nf.args))
        for j < cvt.length {
            c = cvt.charAt(j)
            if c == ',' || c == ')' {
                break
            }
            memory[len(memory)] = c
            j = j + 1
        }
        arg.type = arrToStr(memory)
        clear(memory)
        nf.args[len(nf.args)] = arg
        if c == ')' {
            break
        }
        j = j + 1
    }
    j = j + 1
    for j < cvt.length {
        c = cvt.charAt(j)
        memory[len(memory)] = c
        j = j + 1
    }
    nf.returns = new variable
    nf.returns.name = "_return"
    nf.returns.type = arrToStr(memory)
    return nf
}

//Returns the number of * at the end of a type.
getTypeUnaryLevel(t cpstring) uint {
    i = len(t)-1; for i > 0, i-- {
        if t[i] != '*' {
            return len(t)-1 - i
        }
    }
    return 0
}

//Returns the number of * at the beginning of a var.
getVarUnaryLevel(s cpstring) uint {
    i = 0; for i < len(s), i++ {
        if s[i] != '*' {
            return i
        }
    }
    return 0
}

//Returns all sub-types of a tuple type.
getTypesFromTuple(t cpstring) []cpstring {
    r = []cpstring

    curr = strBuilder{}
    nbBracks = 0
    i=1; for i < len(t)-1, i++ {
        if t[i] == '[' {
            nbBracks++
        } else if t[i] == ']' {
            nbBracks--
        }

        if nbBracks == 0 && t[i] == ',' {
            r[len(r)] = curr.str()
            curr = strBuilder{}
            continue
        }

        curr.append(t[i])
    }

    r[len(r)] = curr.str()

    return r
}

//Returns a C expression calculating a tuple's size from a tuple type.
getTupleSize(t cpstring, elems Elems*) cpstring {
    parts = getTypesFromTuple(t)
    r = "0"
    i=0; for i < len(parts), i++ {
        r += "+sizeof("+getCType(parts[i], elems).str()+")"
    }
    return r
}

//Returns true if the Bah type passed is a tuple.
isTupleType(t cpstring) bool {
    return len(t) > 1 && t[0] == '[' && t[len(t)-1] == ']'
}

//Used for getting the C type from a function.
getCfunctionType(cfrt string*, elemName cpstring, elems Elems*) cpstring {
    tmpfn = parseFnType(*cfrt)
    tmpfnArgsCType = ""
    j=0; for j < len(tmpfn.args), j++ {
        arg = tmpfn.args[j]
        tmpfnArgsCType += getCType(arg.type, elems).str()
        if j + 1 < len(tmpfn.args) {
            tmpfnArgsCType += ","
        }
    }

    if isTupleType(tmpfn.returns.type) {
        coma = ""
        if len(tmpfn.args) > 0 {
            coma = ","
        }
        tmpfnArgsCType += coma+"void*"
    }

    return getCType(tmpfn.returns.type, elems).str() + " (*"+elemName+")("+tmpfnArgsCType+")"
}