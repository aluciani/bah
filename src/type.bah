//These are function used for Bah to C type handling.

#include "./errors.bah"
#include "./lexer.bah"
#include "./struct.bah"

#define searchVar(n cpstring, elems Elems*) variable*
#define isMissingVar(t Tok*, elems Elems*)

intTypes = []cpstring{
    "int",
    "int32",
    "uint",
    "uint32",
    "bool"
}

floatTypes = []cpstring{
    "float",
    "float32",
    "ufloat",
    "ufloat32"
}

//Does a type contain an unary.
typeAsStar(t cpstring) bool {
    return t[len(t)-1] == '*'
}

//Is a Bah type a pointer as C type.
isRCPpointerType(t cpstring) bool {
    if strHasPrefix(t, "function(") {
        return false
    }
    return t == "cpstring" || t == "ptr" || typeAsStar(t) || strHasPrefix(t, "[]") || strHasPrefix(t, "chan:") || strHasPrefix(t, "map:")
}

//Can a Bah type contain a pointer as C type.
isRCPtype(t cpstring, elems Elems*) bool {
    if isRCPpointerType(t) == true {
        return true
    }
    s = searchStruct(t, elems)
    return s != null && s.isBinding == false
}

//Returns a Bah type translated to C.
getCType(t cpstring, elems Elems*) string {
    if len(t) == 0 {
        return string("void")
    }

    tp = string(t)
    tp.replace(" ", "")
    if tp.hasPrefix("[]") {
        tp.trimLeft(2)
        tpstr = tp.str()
        tp = getCType(tpstr, elems)
        t = tp.str()
        r = "array("+t+")*"
        return string(r)
    }
    tp.replace("!", "*")
    

    ctp = tp
    ctp.replace("*", "")

    if tp.hasPrefix("tuple:") {
        parts = splitString(tp, ":")
        tp.set(getCType(parts[2].str(), elems).str()+"*")
    } else if tp.hasPrefix("chan:") == 1 {
        tp.set("struct channel *")
    } else if tp.hasPrefix("map:") == 1 {
        tp.set("struct mapWrapper *")
    } else if tp.hasPrefix("buffer:") == 1 {
        tp.set("char*")
    } else if ctp.str() == "int" {
        tp.replace("int", "long int")
    } else if ctp.str() == "int32" {
        tp.replace("int32", "int")
    } else if ctp.str() == "uint32" {
        tp.replace("uint32", "unsigned int")
    } else if ctp.str() == "uint" {
        tp.replace("uint", "unsigned long int")
    } else if ctp.str() == "float32" {
        tp.replace("float32", "float")
    } else if ctp.str() == "ufloat32" {
        tp.replace("ufloat32", "unsigned float")
    } else if ctp.str() == "ufloat" {
        tp.replace("ufloat", "unsigned double")
    } else if ctp.str() == "float" {
        tp.replace("float", "double")
    } else if ctp.str() == "long" {
        tp.replace("long", "long long")
    } else if ctp.str() == "ulong" {
        tp.replace("ulong", "unsigned long long")
    } else if ctp.str() == "cpstring" {
        tp.replace("cpstring", "char *")
    }
    //  else if ctp.str() == "str" {
    //     tp.replace("str", "char *")
    // }
     else if ctp.str() == "ptr" {
        tp.replace("ptr", "void *")
    } else if ctp.str() == "ushort" {
        tp.replace("ushort", "unsigned short")
    } else if ctp.str() == "byte" {
        tp.replace("byte", "unsigned char")
    } else if ctp.str() == "bool" {
        tp.replace("bool", "char")
    } else if ctp.str() == "char" {
        //do nothing for now
    } else {
        
        ctpstr = ctp.str()
        s = searchStruct(ctpstr, elems)
        if s != null {
            tp.prepend("struct ")
        } else {
            i=0; for i < len(elems.types) {
                ct = elems.types[i]
                if ctp.compare(ct) {
                    return tp
                }
                i = i + 1
            }
            return string("")
        }

    }

    return tp

}

//Transforms a maybe type to a pointer type.
maybeToPtr(a cpstring) cpstring {
    if a[len(a)-1] != '!' {
        return a
    }
    a = a[:len(a)-1] + "*"
    return a
}

//Obsolete.
// compTypeEquiv(a cpstring, b cpstring, first bool) bool {
//     if first == false {
//         return false
//     }
//     if compTypeEquiv(b, a, false) {
//         return true
//     }
//     return a == b
// }

//Compare two types a and b.
//Returns true if a and b are compatible.
compTypes(a cpstring, b cpstring) bool {
    a = maybeToPtr(a)
    b = maybeToPtr(b)
    if a == b || a == "ptr" || b == "ptr" {
        return true
    }

    if a in intTypes && b in intTypes {
        return true
    }
    if a in floatTypes && b in floatTypes {
        return true
    }

    return a == b
}

//Returns the C translation of a variable type and name.
setCType(v variable*, elems Elems*) cpstring {
    tp = getCType(v.type, elems)
    t = tp.str()
    t = t + " " + v.name
    return t
}

//Returns the Bah type of a token.
//Throws an error if strict = true and the token is not a value.
getTypeFromToken(t Tok*, strict bool, elems Elems*) cpstring {
    if t.bahType != "" {
        r = t.bahType
        return r
    }
    if t.type == TOKEN_TYPE_VAR {
        v = searchVar(t.cont, elems)
        if v == null {
            if strict == true {
                isMissingVar(t, elems)
                throwErr(t, "Unknown var {TOKEN}.")
            } else {
                return ""
            }
        }
        if strict == true {
            if v.type == "" {
                throwErr(t, "Cannot use {TOKEN} because it does not have any type.")
            }
        }
        t.bahType = v.type
        return v.type
    }

    if t.type == TOKEN_TYPE_FLOAT {
        return "float"
    }
    if t.type == TOKEN_TYPE_INT {
        return "int"
    }
    if t.type == TOKEN_TYPE_STR {
        return "cpstring"
    }
    if t.type == TOKEN_TYPE_CHAR {
        return "char"
    }
    if t.type == TOKEN_TYPE_BOOL {
        return "bool"
    }
    
    throwErr(t, "Cannot use {TOKEN} as value.")
    return ""

}

//Parses a Bah function type such as 'function(int,cpstring)'.
//Returns a temporary instance of a func.
parseFnType(cvt string) func* {
    nf = new func
    cvt.trimLeft(9)
    memory = []char
    j=0; for j < cvt.length {
        c = cvt.charAt(j)
        if c == ')' {
            break
        }
        arg = new variable
        arg.name = "arg_"+intToStr(len(nf.args))
        for j < cvt.length {
            c = cvt.charAt(j)
            if c == ',' || c == ')' {
                break
            }
            memory[len(memory)] = c
            j = j + 1
        }
        arg.type = arrToStr(memory)
        clear(memory)
        nf.args[len(nf.args)] = arg
        if c == ')' {
            break
        }
        j = j + 1
    }
    j = j + 1
    for j < cvt.length {
        c = cvt.charAt(j)
        memory[len(memory)] = c
        j = j + 1
    }
    nf.returns = new variable
    nf.returns.name = "_return"
    nf.returns.type = arrToStr(memory)
    return nf
}

//Returns the number of * at the end of a type.
getTypeUnaryLevel(t cpstring) uint {
    i = len(t)-1; for i > 0, i-- {
        if t[i] != '*' {
            return len(t)-1 - i
        }
    }
    return 0
}

//Returns the number of * at the beginning of a var.
getVarUnaryLevel(s cpstring) uint {
    i = 0; for i < len(s), i++ {
        if s[i] != '*' {
            return i
        }
    }
    return 0
}