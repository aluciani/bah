//These are functions used for handling variables.

#include "./globals.bah"

#include "./errors.bah"
#include "./lexer.bah"
#include "./type.bah"
#include "./fns.bah"

#define RCPavailable() bool
#define pathToVarName(s str) str
#define strLitteralToBahStr(s str) str

//Returns a pointer to the variable stored inside elems (scope).
//This can be used because searchVar() create a new instance of a variable.
//This function does not transform variable name, as such it searches variable by exact name.
getRealVar(n str, elems Elems*) variable* {
    i=len(elems.vars)-1; for i != -1, i-- {
        if elems.vars[i].name == n {
            return elems.vars[i]
        }
    }
    return null
}

//Removes any '&' or '*' at the begininng of the var token.
removeVarUnar(s string*) {
    i=0; for i < s.length, i++ {
        c = s.charAt(i)
        if c != '&' && c != '*' {
            break
        }
    }
    if i != 0 {
        s.trimLeft(i)
    }
}

//Searches a var by relatively complex token content.
//Returns a pointer to a new instance of the variable.
//Will also search for struct member, array element and functions.
searchVar(name str, t Tok*, elems Elems*) variable* {
    ogName = name
    n = string(name)
    removeVarUnar(&n)    
    name = n.str()


    //may be a variable
    i=len(elems.vars)-1; for i != -1, i-- {
        v = elems.vars[i]
        if v.name == name {
            nv = new variable
            *nv = *v
            r = nv.type
            nbUnaries = getVarUnaryLevel(ogName)
            if nbUnaries > 0 {
                pointerLevel = getTypeUnaryLevel(r)
                if pointerLevel < nbUnaries {
                    throwErr(t, "Cannot use '*' on {TOKEN} because it is not pointer.")
                }
                r = r[:len(r)-nbUnaries]
            }
            nv.type = r
            nv.name = ogName
            if t != null {
                t.setRefVar(v)
            }
            return nv
        }
    }

    //may be a function
    i=0; for i < len(elems.fns), i++ {
        fn = elems.fns[i]
        if fn.name == name {
            nv = new variable
            nv.name = name
            nv.type = "function("
            j=0; for j < len(fn.args) {
                arg = fn.args[j]
                nv.type = nv.type + arg.type
                j++
                if j < len(fn.args) {
                    nv.type = nv.type + ","
                }
            }
            fn.used = true
            nv.type = nv.type + ")" + fn.returns.type
            if t != null {
                t.setRefVar(nv)
            }
            return nv
        }
    }

    return null

}

//The fastest yet less flexible way of searching for a variable given a token.
searchVarByToken(t Tok*, elems Elems*) variable* {
    if t.getRefVar() != null {
        return t.getRefVar()
    }
    cont = string(t.cont)
    removeVarUnar(&cont)
    return getRealVar(cont.str(), elems)
}

//Works as searchVar() but will return Tok.bahRef if not null.
//This can be faster but less predictable.
//This is used when fuctions such as getTypeFromToken() has been called on a token that has not been modified since,
//because such functions create that .bahRef shortcut.
searchVirtVarByToken(t Tok*, elems Elems*) variable* {
    if t.getRefVar() != null {
        return t.getRefVar()
    }
    if t.isOper == true {
        return null
    }
    return searchVar(t.cont, t, elems)
}

//Throws an error if a variable cannot be found because it has reached its end of life.
//This is used for more exotics memory management systems.
isMissingVar(t Tok*, elems Elems*) {
    i=0; for i < len(elems.deletedVars), i++ {
        if elems.deletedVars[i].name == t.cont {
            throwErr(t, "Variable {TOKEN} has reached its end of life.")
        }
    }
}


NB_COMP_VAR = 0

currFileHashed = ""
currFileHash = ""


//Generate a unique name for a temporary compiler variable.
genCompilerVar() str {
    if currFileHashed != compilerState.currentFile {
        currFileHash = pathToVarName(compilerState.currentFile)
        currFileHashed = compilerState.currentFile
    }
    name = "____BAH_COMPILER_VAR_"+intToStr(NB_COMP_VAR)+"_"+currFileHash
    NB_COMP_VAR++
    return name
}

//Returns true if v is in arr (by name).
varInArr(v variable*, arr []variable*) bool {
    if arr == null {
        return false
    }
    j=0; for j < len(arr), j++ {
        ev = arr[j]
        if ev.name == v.name {
            return true
        }
    }
    return false
}

//Transforms a path as valid C variable name.
pathToVarName(p str) str {
    a = strToArr(p)
    i=0; for i < len(a), i++ {
        c int = a[i]
        c -= <int>'a'
        if c < 0 {
            c = 0 - c
        }
        c = c % (<int>'z' - <int>'a')
        c += <int>'a'
        a[i] = <char>c
    }
    return arrToStr(a)
}

//Generates the __Bah_init() function that initiates the default state of the compiled program.
//For instance, this will set the declared value of each global variable.
makeInit() {
    name = "__BAH_init"
    if isObject == true {
        name += pathToVarName(compilerState.currentFile)
    }

    evals = ""
    evalsTMPDecl = "volatile struct __eval_binding __tmp__evals_bindings["+intToStr(len(compilerState.evals))+"] = {"
    i=0; for i < len(compilerState.evals), i++ {
        e = compilerState.evals[i]
        evalsTMPDecl += "{
            .name = "+strLitteralToBahStr("\""+e+"\"")+",
            .evalFn = __Bah_eval_"+e+"
        }"
        if i+1 != len(compilerState.evals) {
            evalsTMPDecl += ",\n"
        } else {
            evalsTMPDecl += "};"
        }
    }

    if len(compilerState.evals) != 0 {
        evals = "__evals_bindings = __tmp__evals_bindings; __evals_length = "+intToStr(len(compilerState.evals))+";"
    } else {
        evalsTMPDecl = ""
    }

    OUTPUT += rope("
    "+evalsTMPDecl+"
    void __attribute__((optimize(\"O0\"))) "+name+"() {
        ") + INIT + rope("
        "+evals+"
    };
    ")
}

//Used for removing a C cast from a variable.
removeCast(s str) str {
    i = len(s)-1; for i >= 0, i-- {
        if s[i] == ')' {
            s = s[i+1:]
            break
        }
    }
    return s
}